Require Import interfaces.set abstract_algebra bundled_algebra.
Require Import interfaces.sprop logic.aprop.
Require Import nat.
Require Import easy rewrite.

Local Open Scope grp_scope.

Section type.
  Universes i.
  Context {X:set@{i}}.

  Inductive list : Type@{i} :=
  | nil : list
  | cons : X ‚Üí list ‚Üí list.

  Definition list_elim {Y:set} : Y ‚Üí (X ‚Üí list ‚Üí Y ‚Üí Y) ‚Üí (list ‚Üí Y)
  := Œª f‚ÇÄ f‚ÇÅ, fix F l := match l with
  | nil => f‚ÇÄ
  | cons x l' => f‚ÇÅ x l' (F l')
  end.

  Definition fold_right {Y:set@{i}} (f: X * Y ‚Üí Y) : list ‚Üí Y ‚Üí Y := fix F x y‚ÇÄ :=
  match x with
  | nil => y‚ÇÄ
  | cons x‚ÇÄ x' => f (x‚ÇÄ, F x' y‚ÇÄ)
  end.

  Lemma list_induction (P : list ‚Üí Œ©) : (‚àè x‚ÇÄ x, P x ‚ä∏ P (cons x‚ÇÄ x)) ‚Üí (P nil ‚ä∏ all P).
  Proof. intros Ps. rew <-all_adj. simple notypeclasses refine (fix F x := match x with | nil => _ | cons x‚ÇÄ x => _ end).
  + refl.
  + specialize (F x). now rew <-(Ps x‚ÇÄ x).
  Qed.

  Definition list_sinduction (P:list ‚Üí SProp) : P nil ‚Üí (‚àÄ x‚ÇÄ x, P x ‚Üí P (cons x‚ÇÄ x)) ‚Üí ‚àÄ x, P x
  := Œª P0 Ps, fix F x := match x with
  | nil => P0
  | cons x‚ÇÄ x => Ps x‚ÇÄ x (F x)
  end.

  Lemma list_destruct (P : list ‚Üí Œ©) : (P nil ‚àß ‚àè x‚ÇÄ x, P (cons x‚ÇÄ x)) ‚ä∏ all P.
  Proof. rew <-all_adj. intros [| x‚ÇÄ x]; [ exact _ |].
    rew (aandr _ _), (all_lb _ x‚ÇÄ). exact (all_lb _ _).
  Qed.

  Lemma list_sdestruct (P : list ‚Üí SProp) : P nil ‚Üí (‚àÄ x‚ÇÄ x, P (cons x‚ÇÄ x)) ‚Üí ‚àÄ x, P x.
  Proof. intros. change ((Œª x, of_course (P x)) x) . apply list_destruct; now split. Qed.


  (*
  Definition list_rec_op {Y:set@{i}} (g: X ‚äó Y ‚áæ Y) (y‚ÇÄ:Y) : list ‚Üí Y := fix F x :=
  match x with
  | nil => y‚ÇÄ
  | cons x‚ÇÄ x' => g (f x‚ÇÄ, F x')
  end.
  *)

  (* Definition concat (x : list) := match x with
  | nil => y
  | cons x‚ÇÄ x' => cons x‚ÇÄ (concat x' y)
  end. *)

  Instance list_equiv (a:Œ© ‚Üí Œ© ‚Üí Œ©) : Equiv list := fix F x y :=
  match x with
  | nil =>
    match y with
    | nil => ùêì
    | cons _ _ => ùêÖ
    end
  | cons x‚ÇÄ x' =>
    match y with
    | nil => ùêÖ
    | cons y‚ÇÄ y' => a (x‚ÇÄ = y‚ÇÄ) (F x' y')
    end
  end.

  (* Context {M:monoid@{i}} (f:X ‚áæ M).

  Fixpoint list_to_monoid (x:list) : M := match x with
  | nil => mon_unit
  | cons x‚ÇÄ x => f x‚ÇÄ ‚àô list_to_monoid x
  end. *)
End type.
Arguments list X : clear implicits.

Declare Scope list_scope.
Delimit Scope list_scope with list.
Bind Scope list_scope with list.
Local Open Scope list_scope.

Module notation.
  Notation "[ ]" := nil (format "[ ]") : list_scope.
  Notation "[ x ]" := (cons x nil) : list_scope.
  Notation "[ x ; y ; .. ; z ]" := (cons x (cons y .. (cons z nil) ..)) : list_scope.
End notation.
Import notation.


Section nth.
  Fixpoint ListInBounds {X:set} (l:list X) (n:Nat) {struct l} : SProp :=
  match l with
  | nil => False
  | cons x l' =>
    match n with
    | nat_0 => True
    | nat_S n' => ListInBounds l' n'
    end
  end.
  Existing Class ListInBounds.

  Fixpoint list_nth {X:set} (l:list X) : ‚àÄ (n:Nat) (p:ListInBounds l n), X :=
  match l with
  | nil => Œª _ p, match p with end
  | cons x l' => Œª n,
    match n with
    | nat_0 => Œª _, x
    | nat_S n' => list_nth l' n'
    end
  end.
  Global Arguments list_nth {X} l n {p}.
End nth.

Global Hint Extern 10 (ListInBounds _ _) => exact I : typeclass_instances.

Definition list_map {X Y:set} (f:X ‚Üí Y) : list X ‚Üí list Y := fix F l :=
match l with
| nil => nil
| cons x l' => cons (f x) (F l')
end.

Lemma list_map_in_bounds {X Y:set} (f:X ‚Üí Y) : ‚àÄ (l:list X) n,  ListInBounds l n ‚Üí ListInBounds (list_map f l) n.
Proof. refine (list_sinduction _ _ _).
+ intros ? [].
+ intros x Œì' IH [| m].
  * intros _. exact I.
  * intros H. specialize (IH _ H). exact IH.
Qed.
Global Hint Extern 2 (ListInBounds (list_map ?f ?l) ?n) => simple notypeclasses refine (list_map_in_bounds f l n _) : typeclass_instances.


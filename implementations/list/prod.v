Require Import interfaces.set abstract_algebra bundled_algebra interfaces.free_monoid.
Require Import interfaces.sprop relations theory.set theory.groups theory.bundled_groups.
Require Import logic.aprop.
Require Import list.base.
Require Import easy rewrite tactics.misc.
Require Import set_lambda.

Local Open Scope grp_scope.

Definition prod_list X := list X.
Global Hint Extern 1 (Equiv (prod_list _)) => refine (list_equiv aand) : typeclass_instances.

Local Instance prod_list_is_set X : IsSet (prod_list X).
Proof. split; hnf; unfold equiv.
+ induction x as [|x‚ÇÄ x]; now simpl.
+ induction x as [|x‚ÇÄ x]; intros [|y‚ÇÄ y]; try now simpl.
  change list with prod_list in *.
  change (x‚ÇÄ = y‚ÇÄ ‚àß x = y ‚ä∏ y‚ÇÄ = x‚ÇÄ ‚àß y = x).
  refine (aand_proper_aimpl _ (IHx y)).
  now apply symmetry.
+ induction x as [|x‚ÇÄ x]; intros [|y‚ÇÄ y][|z‚ÇÄ z]; try now simpl.
  change list with prod_list in *.
  change ((x‚ÇÄ = y‚ÇÄ ‚àß x = y) ‚ä† (y‚ÇÄ = z‚ÇÄ ‚àß y = z) ‚ä∏ (x‚ÇÄ = z‚ÇÄ ‚àß x = z)).
  rew (aand_aprod_swap _ _ _ _). refine (aand_proper_aimpl _ (IHx y z)).
  now apply transitivity.
Qed.

Canonical Structure ProdList X := set_make (prod_list X).
Local Notation "X *" := (ProdList X) (at level 1, format "X *").

Lemma ProdList_is_strong `{!StrongSet X} : StrongSet X*.
Proof. hnf. induction x as [|x‚ÇÄ x]; intros [|y‚ÇÄ y][|z‚ÇÄ z];
    try (simpl; solve [ easy | tautological ]).
  change list with prod_list in *.
  change ((x‚ÇÄ = y‚ÇÄ ‚àß x = y) ‚àß (y‚ÇÄ = z‚ÇÄ ‚àß y = z) ‚ä∏ (x‚ÇÄ = z‚ÇÄ ‚àß x = z)).
  rew (aand_assoc _ _ _). rew <-(aand_assoc (x=y) _ _). rew (aand_com (x=y) _).
  rew (aand_assoc _ _ _). rew <-(aand_assoc (x‚ÇÄ=y‚ÇÄ) _ _).
  refine (aand_proper_aimpl _ (IHx y z)).
  now apply strong_transitivity.
Qed.
Global Hint Extern 2 (StrongSet _*) => simple notypeclasses refine ProdList_is_strong : typeclass_instances.

Global Hint Extern 1 (MonUnit _*) => refine nil : typeclass_instances.
Local Notation Œµ := (mon_unit (M:=_*)).

Lemma ProdList_cons_is_fun X : @IsFun (X √ó X*) X* (Œª p, cons (proj1 p) (proj2 p)).
Proof. now intros [x‚ÇÄ x][y‚ÇÄ y]. Qed.
Definition ProdCons {X} : X √ó X* ‚áæ X* := @make_fun _ _ _ (ProdList_cons_is_fun X).
Local Notation "x :: y" := (func_op ProdCons (x, y)) (at level 60, right associativity).

Definition ProdList_unit {X} : X ‚áæ X* := ap2 (ProdCons ‚àò tensor_to_prod _ _) Œµ.
Local Notation Œ∑ := ProdList_unit.
Local Notation "[ x ]" := (func_op Œ∑ x).
Global Hint Extern 1 (Cast ?X (?X *)) => refine ProdList_unit : typeclass_instances.

Definition ProdList_induction {X} (P : X* ‚Üí Œ©) : (‚àè x‚ÇÄ x, P x ‚ä∏ P (x‚ÇÄ :: x)) ‚Üí (P Œµ ‚ä∏ all P) := list_induction P.
Definition ProdList_sinduction {X} (P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P x ‚Üí P (x‚ÇÄ :: x)) ‚Üí ‚àÄ x, P x := list_sinduction P.

Local Ltac doit P := let x‚ÇÄ := fresh "x‚ÇÄ" in let x := fresh "x" in let IHx := fresh "IHx" in
  let y‚ÇÄ := fresh "y‚ÇÄ" in let y := fresh "y" in
  hnf; refine (ProdList_sinduction _ _ _);
  [| intros x‚ÇÄ x IHx]; intros [|y‚ÇÄ y];
  [ now change (P ùêì) | now change (P ùêÖ) .. |
    specialize (IHx y); now change (P (x‚ÇÄ = y‚ÇÄ ‚àß x = y)) ].
Lemma ProdList_DecidableEquality   `{!DecidableEquality   X} : DecidableEquality   X*.  Proof. doit Decidable.   Qed.
Lemma ProdList_RefutativeEquality  `{!RefutativeEquality  X} : RefutativeEquality  X*.  Proof. doit Refutative.  Qed.
Global Hint Extern 2 (DecidableEquality   _*) => simple notypeclasses refine ProdList_DecidableEquality   : typeclass_instances.
Global Hint Extern 2 (RefutativeEquality  _*) => simple notypeclasses refine ProdList_RefutativeEquality  : typeclass_instances.

Import projection_notation.

Local Instance ProdList_match_is_fun {X Y} : @IsFun (Y √ó ((X √ó X* ) ‚áæ Y) ‚äó X* ) Y
   (Œª p, match œÄ‚ÇÇ p with
         | nil => œÄ‚ÇÅ (œÄ‚ÇÅ p)
         | cons x l => œÄ‚ÇÇ (œÄ‚ÇÅ p) (x, l)
         end).
Proof. intros [p [|x l]][q [|y l']].
+ change (p = q ‚ä† atrue ‚ä∏ œÄ‚ÇÅ p = œÄ‚ÇÅ q).
  rew (aprod_unit_r _). exact (is_fun (prod_proj1 _ _) _ _).
+ change (?P ‚ä∏ ?Q) with (p = q ‚ä† afalse ‚ä∏ Q). now rew (aprod_false_r _).
+ change (?P ‚ä∏ ?Q) with (p = q ‚ä† afalse ‚ä∏ Q). now rew (aprod_false_r _).
+ let f := constr:( set:( (Œª '(p, q), œÄ‚ÇÇ p q) : tprod (Y √ó (X √ó X* ‚áæ Y)) (X √ó X* ) ‚Üí Y ) ) in
  exact ( is_fun f (p, (x, l)) (q, (y, l')) ).
Qed.
Definition ProdList_match {X Y} := curry (@make_fun _ _ _ (@ProdList_match_is_fun X Y)).



Definition ProdList_elim_op {X Y} (f: (X √ó X*) √ó Y ‚áæ Y) (y:Y) : X* ‚Üí Y := fix F l :=
match l with
| nil => y
| cons x l => f (x, l, F l)
end.

Local Instance ProdList_elim_is_fun {X Y} (f: (X √ó X*) √ó Y ‚áæ Y) : @IsFun (Y √ó X*) Y
  (tuncurry (ProdList_elim_op f)).
Proof. intros [y l][y' l']. unfold_pair_eq.
  unfold tuncurry, proj1, proj2. revert l l'.
  refine (list_sinduction _ _ _); [| intros x l IH ];
  (refine (list_sdestruct _ _ _); [| intros x' l' ]).
+ now change (y = y' ‚àß Œµ = Œµ :> X* ‚ä∏ y = y').
+ change (Œµ = _) with afalse. now rew (aand_false_r _). 
+ change (_ = Œµ) with afalse. now rew (aand_false_r _).
+ change (ProdList_elim_op f ?y (cons ?x ?l)) with (f (x, l, ProdList_elim_op f y l)).
  rew <-(is_fun f _ _). apply aand_intro; [ exact (aandr _ _) |].
  rew <-(IH l'). change (y = y' ‚àß (x = x' ‚àß l = l' :> X*) ‚ä∏ y = y' ‚àß l = l' :> X*).
  now rew (aandr (x = x') _).
Qed.

Definition ProdList_elim {X Y} (f: (X √ó X*) √ó Y ‚áæ Y) : Y √ó X* ‚áæ Y := @make_fun _ _ _ (@ProdList_elim_is_fun X Y f).

Definition ProdList_fold_right  {X Y} (f: X √ó Y ‚áæ Y) : X* √ó Y ‚áæ Y
  := ProdList_elim set:(Œª p : (X √ó X*) √ó Y, f (œÄ‚ÇÅ (œÄ‚ÇÅ p), œÄ‚ÇÇ p)) ‚àò prod_swap _ _.

(*
Section fold_right.
  Local Instance fold_right_is_fun {X Y} (f: X √ó Y ‚áæ Y) : @IsFun (X* √ó Y) Y (Œª p, fold_right f (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)).
  Proof. intros [x y‚ÇÄ][x' y‚ÇÄ']. unfold proj1, proj2. unfold_pair_eq.
    revert x x'. refine (ProdList_sinduction _ _ _).
  + intros [|x‚ÇÄ x'].
    * now change (Œµ = Œµ :> X* ‚àß y‚ÇÄ = y‚ÇÄ' ‚ä∏ y‚ÇÄ = y‚ÇÄ').
    * change (Œµ = cons x‚ÇÄ x') with afalse. now rew (aand_false_l _).
  + intros x‚ÇÄ x IH [|x‚ÇÄ' x'].
    * change (x‚ÇÄ :: x = nil) with afalse. now rew (aand_false_l _).
    * change ( (x‚ÇÄ = x‚ÇÄ' ‚àß x = x') ‚àß y‚ÇÄ = y‚ÇÄ' ‚ä∏ f (x‚ÇÄ, fold_right f x y‚ÇÄ) = f (x‚ÇÄ', fold_right f x' y‚ÇÄ') ).
      rew [(aand_assoc _ _ _) | <- (is_fun f _ _)].
      refine (aand_proper_aimpl _ _); [ refl | exact (IH _) ].
  Qed.

  Definition ProdList_fold_right {X Y} (f: X √ó Y ‚áæ Y) : X* √ó Y ‚áæ Y := @make_fun _ _ _ (fold_right_is_fun f).
End fold_right.
*)

Definition ProdList_concat {X} : X* √ó X* ‚áæ X* := ProdList_fold_right ProdCons.
Global Hint Extern 1 (SgOp _*) => refine (ProdList_concat ‚àò tensor_to_prod _ _) : typeclass_instances.

Definition ProdList_induction_alt `(P:X* ‚Üí Œ©) : (‚àè x‚ÇÄ x, P x ‚ä∏ P ([x‚ÇÄ] ‚àô x)) ‚Üí (P Œµ ‚ä∏ all P)
:= ProdList_induction P.
Definition ProdList_sinduction_alt `(P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P x ‚Üí P ([x‚ÇÄ] ‚àô x)) ‚Üí ‚àÄ x, P x
:= ProdList_sinduction P.

Lemma ProdList_sdestruct `(P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P ([x‚ÇÄ] ‚àô x)) ‚Üí ‚àÄ x, P x.
Proof. intros P0 Ps [|??]; trivial. exact (Ps _ _). Qed.


Local Instance ProdList_concat_assoc X: Associative (X:=X*) (‚àô).
Proof. refine (ProdList_sinduction_alt _ _ _); [ easy | intros x‚ÇÄ x IHx ].
  intros y z. change ( [x‚ÇÄ] ‚àô (x ‚àô (y ‚àô z)) = [x‚ÇÄ] ‚àô (x ‚àô y ‚àô z) ).
  now rew (IHx y z).
Qed.

Local Instance ProdList_concat_left_id X: LeftIdentity (X:=X*) (‚àô) Œµ.
Proof. now hnf. Qed.

Local Instance ProdList_concat_right_id X: RightIdentity (X:=X*) (‚àô) Œµ.
Proof. refine (ProdList_sinduction_alt _ _ _); [ easy | intros x‚ÇÄ x IHx ].
  change ([x‚ÇÄ] ‚àô (x ‚àô Œµ) = [x‚ÇÄ] ‚àô x). now rew IHx.
Qed.

Local Instance ProdList_is_str_monoid {X} : StrongOpMonoid X*.
Proof. split; [ now apply alt_Build_Monoid | exact _ ]. Qed.
Global Hint Extern 2 (StrongOpMonoid _*) => simple notypeclasses refine ProdList_is_str_monoid : typeclass_instances.
Global Hint Extern 2 (Monoid _*) => simple notypeclasses refine ProdList_is_str_monoid : typeclass_instances.
Global Hint Extern 2 (SemiGroup _*) => simple notypeclasses refine ProdList_is_str_monoid : typeclass_instances.

Canonical Structure ProdList_mon (X:set) := make_monoid X*.
Canonical Structure ProdList_str_mon (X:set) := make_strong_op_monoid X*.

Global Hint Extern 1 (Cast ?X (strong_op_monoid_car (ProdList_str_mon ?X))) => refine ProdList_unit : typeclass_instances.

Section to_monoid.
  Universes i.
  Context {X:set@{i}} {M:strong_op_monoid@{i}}.
  Notation e := (mon_unit (M:=strong_op_monoid_car M)).

  Definition ProdList_to_monoid_op (f:X ‚áæ M) : X* ‚áæ M := set:(Œª x, ProdList_fold_right (set:(Œª p : X √ó M, f (œÄ‚ÇÅ p) ‚àô (œÄ‚ÇÇ p))) (x, e)).
  Local Notation œï := ProdList_to_monoid_op.

  Local Instance ProdList_to_monoid_is_fun : IsFun œï.
  Proof. intros f g. change (f = g ‚ä∏ ‚àè x, œï f x = œï g x). rew <-all_adj.
    refine (ProdList_sinduction_alt _ _ _); [| intros a x IH ].
  + change (f = g ‚ä∏ e = e). now rew (aiff_is_true (_ : e = e)).
  + change (f = g ‚ä∏ f a ‚àô œï f x = g a ‚àô œï g x).
    rew <-( (_ : StrongOp (‚àô)) (f a, œï f x) (g a, œï g x) ); apply aand_intro; trivial.
    exact (all_lb _ a).
  Qed.

  Definition ProdList_to_monoid := make_fun œï.

  Local Notation "X ‚ü∂ Y" := (strong_op_monoid_morphism X Y).

  Section with_f.
    Context (f: X ‚áæ M).
    Local Notation g := (ProdList_to_monoid_op f).

    Lemma ProdList_to_monoid_is_mon_mor : Monoid_Morphism g.
    Proof. apply alt_Build_Monoid_Morphism; [| refl].
      refine (ProdList_sinduction_alt _ _ _); [| intros a x IH ]; intros y.
    + change (g y = e ‚àô g y). now group_simplify.
    + change (f a ‚àô g (x ‚àô y) = (f a ‚àô g x) ‚àô g y).
      rew (IH y). now group_simplify.
    Qed.

    Lemma ProdList_to_monoid_spec : f = g ‚àò Œ∑.
    Proof. intros a. change (f a = f a ‚àô e). now group_simplify. Qed.

    Lemma ProdList_to_monoid_unique (h:X* ‚ü∂ M) : f = h ‚àò Œ∑ ‚Üí h = g :> (X* ‚áæ M).
    Proof. pose proof ProdList_to_monoid_is_mon_mor.
      intros E. refine (ProdList_sinduction_alt _ _ _).
    + now rew !2(preserves_unit _).
    + intros x‚ÇÄ x IH. rew !2(preserves_sg_op _ _ _).
      now rew [ IH | <-(E x‚ÇÄ : f x‚ÇÄ = h (Œ∑ x‚ÇÄ)) | <-(ProdList_to_monoid_spec x‚ÇÄ : f x‚ÇÄ = g (Œ∑ x‚ÇÄ)) ].
    Qed.
  End with_f.

  Definition ProdList_to_monoid_mon_mor : (X ‚áæ M) ‚áæ (X* ‚ü∂ M).
  Proof. simple refine (make_fun (Œª f, make_monoid_morphism (ProdList_to_monoid_op f))).
  + exact (ProdList_to_monoid_is_mon_mor f).
  + exact ProdList_to_monoid_is_fun.
  Defined.
End to_monoid.
Canonical ProdList_to_monoid.
Global Hint Extern 1 (FromFreeStrongMonoid (cast ?X (ProdList ?X))) => refine (@ProdList_to_monoid_mon_mor _) : typeclass_instances.
Global Hint Extern 1 (FromFreeStrongMonoid (cast ?X (strong_op_monoid_car (ProdList_str_mon ?X)))) => refine (@ProdList_to_monoid_mon_mor _) : typeclass_instances.
Global Hint Extern 1 (FromFreeStrongMonoid ProdList_unit) => refine (@ProdList_to_monoid_mon_mor _) : typeclass_instances.

Lemma ProdList_FreeStrongMonoid {X} : FreeStrongMonoid (X:=X) Œ∑.
Proof. split; intros M f.
+ apply ProdList_to_monoid_spec.
+ apply ProdList_to_monoid_unique.
Qed.

Global Hint Extern 2 (FreeStrongMonoid (cast ?X (ProdList ?X))) => notypeclasses refine ProdList_FreeStrongMonoid : typeclass_instances.
Global Hint Extern 2 (FreeStrongMonoid (cast ?X (strong_op_monoid_car (ProdList_str_mon ?X)))) => notypeclasses refine ProdList_FreeStrongMonoid : typeclass_instances.
Global Hint Extern 2 (FreeStrongMonoid ProdList_unit) => notypeclasses refine ProdList_FreeStrongMonoid : typeclass_instances.

Definition ProdList_map `(f:X ‚áæ Y) := ProdList_to_monoid_mon_mor (ProdList_unit ‚àò f).
Definition ProdList_map_in_bounds `(f:X ‚áæ Y) : ‚àÄ (l:X*) n,  ListInBounds l n ‚Üí ListInBounds (ProdList_map f l) n := list_map_in_bounds f.
Global Hint Extern 2 (ListInBounds (func_op (monoid_morphism_fun (ProdList_map ?f)) ?l) ?n) => simple notypeclasses refine (ProdList_map_in_bounds f l n _) : typeclass_instances.





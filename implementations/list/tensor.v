Require Import interfaces.set abstract_algebra bundled_algebra interfaces.free_monoid.
Require Import interfaces.sprop theory.set theory.groups.
Require Import logic.aprop.
Require Export list.base.
Require Import easy rewrite tactics.misc.
Require Import set_lambda.

Local Open Scope grp_scope.

Definition tensor_list X := list X.
Global Hint Extern 1 (Equiv (tensor_list _)) => refine (list_equiv aprod) : typeclass_instances.

Local Instance tensor_list_is_set X : IsSet (tensor_list X).
Proof. split; hnf; unfold equiv.
+ induction x as [|x‚ÇÄ x]; now simpl.
+ induction x as [|x‚ÇÄ x]; intros [|y‚ÇÄ y]; try now simpl.
  change list with tensor_list in *.
  change (x‚ÇÄ = y‚ÇÄ ‚ä† x = y ‚ä∏ y‚ÇÄ = x‚ÇÄ ‚ä† y = x).
  refine (aprod_proper_aimpl _ (IHx y)).
  now apply symmetry.
+ induction x as [|x‚ÇÄ x]; intros [|y‚ÇÄ y][|z‚ÇÄ z]; try now simpl.
  change list with tensor_list in *.
  change ((x‚ÇÄ = y‚ÇÄ ‚ä† x = y) ‚ä† (y‚ÇÄ = z‚ÇÄ ‚ä† y = z) ‚ä∏ (x‚ÇÄ = z‚ÇÄ ‚ä† x = z)).
  rew (aprod_assoc _ _ _). rew <-(aprod_assoc (x=y) _ _). rew (aprod_com (x=y) _).
  rew (aprod_assoc _ _ _). rew <-(aprod_assoc (x‚ÇÄ=y‚ÇÄ) _ _).
  refine (aprod_proper_aimpl _ (IHx y z)).
  now apply transitivity.
Qed.

Canonical Structure TensorList X := set_make (tensor_list X).
Local Notation "X *" := (TensorList X) (at level 1, format "X *").

Global Hint Extern 1 (MonUnit _*) => refine nil : typeclass_instances.
Local Notation Œµ := (mon_unit (M:=_*)).

Lemma TensorList_cons_is_fun X : @IsFun (X ‚äó X*) X* (Œª p, cons (proj1 p) (proj2 p)).
Proof. now intros [x‚ÇÄ x][y‚ÇÄ y]. Qed.
Definition TensorCons {X} : X ‚äó X* ‚áæ X* := @make_fun _ _ _ (TensorList_cons_is_fun X).
Local Notation "x :: y" := (func_op TensorCons (x, y)) (at level 60, right associativity).

Definition TensorList_unit {X} : X ‚áæ X* := ap2 TensorCons Œµ.
Local Notation Œ∑ := TensorList_unit.
Local Notation "[ x ]" := (func_op Œ∑ x).
Global Hint Extern 1 (Cast ?X (?X *)) => refine TensorList_unit : typeclass_instances.

Definition TensorList_induction {X} (P : X* ‚Üí Œ©) : (‚àè x‚ÇÄ x, P x ‚ä∏ P (x‚ÇÄ :: x)) ‚Üí (P Œµ ‚ä∏ all P) := list_induction P.
Definition TensorList_sinduction {X} (P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P x ‚Üí P (x‚ÇÄ :: x)) ‚Üí ‚àÄ x, P x := list_sinduction P.

Local Ltac doit P := let x‚ÇÄ := fresh "x‚ÇÄ" in let x := fresh "x" in let IHx := fresh "IHx" in
  let y‚ÇÄ := fresh "y‚ÇÄ" in let y := fresh "y" in
  hnf; refine (TensorList_sinduction _ _ _);
  [| intros x‚ÇÄ x IHx]; intros [|y‚ÇÄ y];
  [ now change (P ùêì) | now change (P ùêÖ) .. |
    specialize (IHx y); now change (P (x‚ÇÄ = y‚ÇÄ ‚ä† x = y)) ].
Lemma TensorList_DecidableEquality   `{!DecidableEquality   X} : DecidableEquality   X*.  Proof. doit Decidable.   Qed.
Lemma TensorList_AffirmativeEquality `{!AffirmativeEquality X} : AffirmativeEquality X*.  Proof. doit Affirmative. Qed.
Lemma TensorList_RefutativeEquality  `{!RefutativeEquality  X} : RefutativeEquality  X*.  Proof. doit Refutative.  Qed.
Global Hint Extern 2 (DecidableEquality   _*) => simple notypeclasses refine TensorList_DecidableEquality   : typeclass_instances.
Global Hint Extern 2 (AffirmativeEquality _*) => simple notypeclasses refine TensorList_AffirmativeEquality : typeclass_instances.
Global Hint Extern 2 (RefutativeEquality  _*) => simple notypeclasses refine TensorList_RefutativeEquality  : typeclass_instances.

Import projection_notation.

Local Instance TensorList_match_is_fun {X Y} : @IsFun (Y √ó ((X ‚äó X* ) ‚áæ Y) ‚äó X* ) Y
   (Œª p, match œÄ‚ÇÇ p with
         | nil => œÄ‚ÇÅ (œÄ‚ÇÅ p)
         | cons x l => œÄ‚ÇÇ (œÄ‚ÇÅ p) (x, l)
         end).
Proof. intros [p [|x l]][q [|y l']].
+ change (p = q ‚ä† atrue ‚ä∏ œÄ‚ÇÅ p = œÄ‚ÇÅ q).
  rew (aprod_unit_r _). exact (is_fun (prod_proj1 _ _) _ _).
+ change (?P ‚ä∏ ?Q) with (p = q ‚ä† afalse ‚ä∏ Q). now rew (aprod_false_r _).
+ change (?P ‚ä∏ ?Q) with (p = q ‚ä† afalse ‚ä∏ Q). now rew (aprod_false_r _).
+ let f := constr:( set:( (Œª '(p, q), œÄ‚ÇÇ p q) : tprod (Y √ó (X ‚äó X* ‚áæ Y)) (X ‚äó X* ) ‚Üí Y ) ) in
  exact ( is_fun f (p, (x, l)) (q, (y, l')) ).
Qed.
Definition TensorList_match {X Y} := curry (@make_fun _ _ _ (@TensorList_match_is_fun X Y)).


Section fold_right.
  Local Instance fold_right_is_fun {X Y} (f: X ‚äó Y ‚áæ Y) : @IsFun (X* ‚äó Y) Y (Œª p, fold_right f (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)).
  Proof. intros [x y‚ÇÄ][x' y‚ÇÄ']. unfold proj1, proj2. unfold_pair_eq.
    revert x x'. refine (TensorList_sinduction _ _ _).
  + intros [|x‚ÇÄ x'].
    * now change (Œµ = Œµ :> X* ‚ä† y‚ÇÄ = y‚ÇÄ' ‚ä∏ y‚ÇÄ = y‚ÇÄ').
    * change (Œµ = cons x‚ÇÄ x') with afalse. now rew (aprod_false_l _).
  + intros x‚ÇÄ x IH [|x‚ÇÄ' x'].
    * change (x‚ÇÄ :: x = nil) with afalse. now rew (aprod_false_l _).
    * change ( (x‚ÇÄ = x‚ÇÄ' ‚ä† x = x') ‚ä† y‚ÇÄ = y‚ÇÄ' ‚ä∏ f (x‚ÇÄ, fold_right f x y‚ÇÄ) = f (x‚ÇÄ', fold_right f x' y‚ÇÄ') ).
      rew [(aprod_assoc _ _ _) | <- (is_fun f _ _)].
      refine (aprod_proper_aimpl _ _); [ refl | exact (IH _) ].
  Qed.

  Definition TensorList_fold_right {X Y} (f: X ‚äó Y ‚áæ Y) : X* ‚äó Y ‚áæ Y := @make_fun _ _ _ (fold_right_is_fun f).
End fold_right.

Definition TensorList_concat {X} : X* ‚äó X* ‚áæ X* := TensorList_fold_right TensorCons.
Global Hint Extern 1 (SgOp _*) => refine (TensorList_concat) : typeclass_instances.

Definition TensorList_induction_alt `(P:X* ‚Üí Œ©) : (‚àè x‚ÇÄ x, P x ‚ä∏ P ([x‚ÇÄ] ‚àô x)) ‚Üí (P Œµ ‚ä∏ all P)
:= TensorList_induction P.
Definition TensorList_sinduction_alt `(P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P x ‚Üí P ([x‚ÇÄ] ‚àô x)) ‚Üí ‚àÄ x, P x
:= TensorList_sinduction P.

Lemma TensorList_sdestruct `(P:X* ‚Üí SProp) : P Œµ ‚Üí (‚àÄ x‚ÇÄ x, P ([x‚ÇÄ] ‚àô x)) ‚Üí ‚àÄ x, P x.
Proof. intros P0 Ps [|??]; trivial. exact (Ps _ _). Qed.

Local Instance TensorList_concat_assoc X: Associative (X:=X*) (‚àô).
Proof. refine (TensorList_sinduction_alt _ _ _); [ easy | intros x‚ÇÄ x IHx ].
  intros y z. change ( [x‚ÇÄ] ‚àô (x ‚àô (y ‚àô z)) = [x‚ÇÄ] ‚àô (x ‚àô y ‚àô z) ).
  now rew (IHx y z).
Qed.

Local Instance TensorList_concat_left_id X: LeftIdentity (X:=X*) (‚àô) Œµ.
Proof. now hnf. Qed.

Local Instance TensorList_concat_right_id X: RightIdentity (X:=X*) (‚àô) Œµ.
Proof. refine (TensorList_sinduction_alt _ _ _); [ easy | intros x‚ÇÄ x IHx ].
  change ([x‚ÇÄ] ‚àô (x ‚àô Œµ) = [x‚ÇÄ] ‚àô x). now rew IHx.
Qed.

Local Instance TensorList_is_monoid {X} : Monoid X*.
Proof. now apply alt_Build_Monoid. Qed.
Global Hint Extern 2 (Monoid _*) => simple notypeclasses refine TensorList_is_monoid : typeclass_instances.
Global Hint Extern 2 (SemiGroup _*) => simple notypeclasses refine TensorList_is_monoid : typeclass_instances.

Canonical Structure TensorList_mon X := make_monoid X*.

Global Hint Extern 1 (Cast ?X (monoid_car (TensorList_mon ?X))) => refine TensorList_unit : typeclass_instances.

Section to_monoid.
  Universes i.
  Context {X:set@{i}} {M:monoid@{i}} (f:X ‚áæ M).
  Notation e := (mon_unit (M:=monoid_car M)).

  Definition TensorList_to_monoid : X* ‚áæ M := set:(Œª x, TensorList_fold_right (uncurry set:(Œª x y, f x ‚àô y)) (x, e)).
  Local Notation g := TensorList_to_monoid.

  Lemma TensorList_to_monoid_is_mon_mor : Monoid_Morphism g.
  Proof. apply alt_Build_Monoid_Morphism; [| refl].
    refine (TensorList_sinduction_alt _ _ _); [| intros a x IH ]; intros y.
  + change (g y = e ‚àô g y). now group_simplify.
  + change (f a ‚àô g (x ‚àô y) = (f a ‚àô g x) ‚àô g y).
    rew (IH y). now group_simplify.
  Qed.
  Definition TensorList_to_monoid_mon_mor := @make_monoid_morphism _ _ g TensorList_to_monoid_is_mon_mor.

  Lemma TensorList_to_monoid_spec : f = g ‚àò Œ∑.
  Proof. intros a. change (f a = f a ‚àô e). now group_simplify. Qed.

  Local Notation "X ‚ü∂ Y" := (monoid_morphism X Y).
  Lemma TensorList_to_monoid_unique (h:X* ‚ü∂ M) : f = h ‚àò Œ∑ ‚Üí h = g :> (X* ‚áæ M).
  Proof. pose proof TensorList_to_monoid_is_mon_mor.
    intros E. refine (TensorList_sinduction_alt _ _ _).
  + now rew !2(preserves_unit _).
  + intros x‚ÇÄ x IH. rew !2(preserves_sg_op _ _ _).
    now rew [ IH | <-(E x‚ÇÄ : f x‚ÇÄ = h (Œ∑ x‚ÇÄ)) | <-(TensorList_to_monoid_spec x‚ÇÄ : f x‚ÇÄ = g (Œ∑ x‚ÇÄ)) ].
  Qed.
End to_monoid.
Canonical TensorList_to_monoid_mon_mor.

Global Hint Extern 1 (FromFreeMonoid (cast ?X (monoid_car (TensorList_mon ?X)))) => refine (@TensorList_to_monoid _) : typeclass_instances.
Global Hint Extern 1 (FromFreeMonoid (cast ?X (TensorList ?X))) => refine (@TensorList_to_monoid _) : typeclass_instances.
Global Hint Extern 1 (FromFreeMonoid TensorList_unit) => refine (@TensorList_to_monoid _) : typeclass_instances.

Lemma TensorList_FreeMonoid {X} : FreeMonoid (X:=X) Œ∑.
Proof. split; intros M f.
+ apply TensorList_to_monoid_spec.
+ apply TensorList_to_monoid_unique.
Qed.
Global Hint Extern 2 (FreeMonoid (cast ?X (monoid_car (TensorList ?X)))) => refine TensorList_FreeMonoid : typeclass_instances.
Global Hint Extern 2 (FreeMonoid (cast ?X (TensorList ?X))) => refine TensorList_FreeMonoid : typeclass_instances.
Global Hint Extern 2 (FreeMonoid TensorList_unit) => refine TensorList_FreeMonoid : typeclass_instances.

Definition TensorList_map `(f:X ‚áæ Y) := TensorList_to_monoid_mon_mor (TensorList_unit ‚àò f).


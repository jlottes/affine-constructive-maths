Require Export interfaces.set.
Require Import sprop relations.
Require Import logic.aprop tauto.
Require Import easy rewrite tactics.misc.

Local Open Scope set_scope.

Global Hint Extern 2 (apos (aimpl (_ = _) _)) => sapply_2 (Transitive_rel_proper_aimpl (=)) : proper.
Global Hint Extern 2 (apos (aiff  (_ = _) _)) => sapply_2 (PER_rel_proper_aiff (=)) : proper.


Lemma prod_pair_proper {X Y : set} {x‚ÇÅ x‚ÇÇ : X} {y‚ÇÅ y‚ÇÇ : Y} :
  x‚ÇÅ = x‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ ‚Üí (x‚ÇÅ, y‚ÇÅ) = (x‚ÇÇ, y‚ÇÇ) :> X √ó Y.
Proof. now split. Qed.
Lemma tensor_pair_proper : ‚àÄ {X Y : set} {x‚ÇÅ x‚ÇÇ : X} {y‚ÇÅ y‚ÇÇ : Y},
  x‚ÇÅ = x‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ ‚Üí (x‚ÇÅ, y‚ÇÅ) = (x‚ÇÇ, y‚ÇÇ) :> X ‚äó Y.
Proof @prod_pair_proper.
Global Hint Extern 2 (apos (pair _ _ = _ :> set_T (_ √ó _) )) => sapply_2 prod_pair_proper : proper.
Global Hint Extern 2 (apos (pair _ _ = _ :> set_T (_ ‚äó _) )) => sapply_2 tensor_pair_proper : proper.
Global Hint Extern 2 (apos (pair _ _ = _ :> _ * _ ))
  => first [ sapply_2 prod_pair_proper
           | sapply_2 tensor_pair_proper ] : proper.


Global Hint Extern 1 (Subrelation (@equiv _ ?R) (@equiv _ ?R)) =>
  simple notypeclasses refine (Subrelation_refl_applied _) : typeclass_instances.
Global Hint Extern 10 (Subrelation (=) (=)) =>
  simple notypeclasses refine (Subrelation_refl_applied _) : typeclass_instances.
Global Hint Extern 10 (sSubrelation
  (Œª x y, apos (of_course_rel (Œª x0 x1, apos (x0 = x1)) x y))
  (Œª x y, apos (of_course_rel (Œª x0 x1, apos (x0 = x1)) x y))) =>
  simple notypeclasses refine (srelations.sSubrelation_refl_applied _) : typeclass_instances.


(** There is a comonad "!" where !X forgets the refutative part of equality. *)

Global Hint Extern 4 (@IsSet _ (of_course_rel (Œª x y, apos (x = y)))) => lazymatch goal with |- @IsSet _ ?R => change (Equivalence R) end : typeclass_instances.
Definition of_course_set (X:set) : set := set_make X (set_eq := of_course_rel (=)).

Global Hint Extern 10 (apos (?a = ?b :> set_T (of_course_set ?X) )) => change (apos (a = b :> set_T X)) : proper.

Module of_course_set_notation.
  Notation "! X" := (of_course_set X) (at level 7, right associativity, format "! X") : set_scope.
End of_course_set_notation.
Import of_course_set_notation.

Lemma of_course_set_aff_eq {X:set} : AffirmativeEquality !X.
Proof _ : AffirmativeRelation (of_course_rel (=)).
Global Hint Extern 2 (AffirmativeEquality !_) => simple notypeclasses refine of_course_set_aff_eq : typeclass_instances.

Definition of_course_counit_is_fun {X:set} : @IsFun !X X id := tautology.
Definition of_course_counit X : !X ‚áæ X := @make_fun _ _ _ (@of_course_counit_is_fun X).

Lemma of_course_map_is_fun `(f:X ‚áæ Y) : @IsFun (!X) (!Y) f.
Proof. intros x‚ÇÅ x‚ÇÇ. apply affirmative_aimpl. intros E. now apply (is_fun f _ _). Qed.
Definition of_course_map `(f:X ‚áæ Y) : !X ‚áæ !Y := @make_fun _ _ _ (of_course_map_is_fun f).

(** Co-multiplication is definitionally the identity: !X ‚â° !!X *)

Ltac flatten_of_course_set tm :=
  lazymatch tm with
  | context f [ !! ?X ] =>
    let tm' := context f [ !X ] in
    flatten_of_course_set tm'
  | _ => tm
  end.

Definition of_course_extend {X Y} (f:!X ‚áæ Y) : !X ‚áæ !Y := of_course_map f.

Lemma of_course_equiv_subrel {X:set} : @Subrelation (set_T X) (@equiv (set_T X) (set_eq (of_course_set X))) (=).
Proof. tautological. Qed.
Global Hint Extern 2 (Subrelation (@equiv _ (set_eq (of_course_set ?X))) (@equiv _ (set_eq ?X))) =>
  simple notypeclasses refine of_course_equiv_subrel : typeclass_instances.

Definition of_course_tensor_set X Y := @make_fun !(X ‚äó Y) (!X ‚äó !Y) id tautology.
Definition of_course_tensor_set_inv X Y := @make_fun (!X ‚äó !Y) !(X ‚äó Y) id tautology.
Global Hint Extern 1 (Inverse (of_course_tensor_set ?X ?Y)) => refine (of_course_tensor_set_inv X Y) : typeclass_instances.
Global Hint Extern 1 (Inverse (of_course_tensor_set_inv ?X ?Y)) => refine (of_course_tensor_set X Y) : typeclass_instances.

Definition of_course_prod_set X Y := @make_fun !(X √ó Y) (!X ‚äó !Y) id tautology.
Definition of_course_prod_set_inv X Y := @make_fun (!X ‚äó !Y) !(X √ó Y) id tautology.
Global Hint Extern 1 (Inverse (of_course_prod_set ?X ?Y)) => refine (of_course_prod_set_inv X Y) : typeclass_instances.
Global Hint Extern 1 (Inverse (of_course_prod_set_inv ?X ?Y)) => refine (of_course_prod_set X Y) : typeclass_instances.

Global Hint Extern 2 (apos (?x = ?y :> set_T( !(?X ‚äó ?Y)))) =>  change (x = y :> !X ‚äó !Y) : proper.
Global Hint Extern 2 (apos (?x = ?y :> set_T( !(?X √ó ?Y)))) =>  change (x = y :> !X ‚äó !Y) : proper.

Definition of_course_op `(f:X ‚äó Y ‚áæ Z) : !X ‚äó !Y ‚áæ !Z
 := of_course_map f ‚àò of_course_tensor_set_inv _ _.

Definition of_course_extend2 {X Y Z} (f:!X ‚äó !Y ‚áæ Z) : !X ‚äó !Y ‚áæ !Z := of_course_op f.

Ltac make_fun_alt_tac f H :=
  let H' := constr:(H : IsFun _) in
  lazymatch type of H' with @IsFun ?X ?Y _ =>
    let X' := flatten_of_course_set X in
    let Y' := flatten_of_course_set Y in
    exact (@make_fun X' Y' f H)
  end.

Notation make_fun_alt f H := ltac:(make_fun_alt_tac f H) (only parsing).


Lemma IsWeakFun {X Y : set} (f:X ‚Üí Y) : (‚àÄ x y, x = y ‚Üí f x = f y) ‚Üí @IsFun !X !Y f.
Proof. intros H x y. apply affirmative_aimpl. now apply H. Qed.
Definition make_weak_fun {X Y : set} (f:X ‚Üí Y) (H:‚àÄ x y, x = y ‚Üí f x = f y) : !X ‚áæ !Y
  := make_fun_alt f (IsWeakFun f H).


Coercion IsDecEq_DecidableEquality `{H:IsDecEq X} : DecidableEquality X := IsDec_Decidable.

Coercion dec_eq_aff_eq {X:set} {H:DecidableEquality X} : AffirmativeEquality X := H.
Coercion dec_eq_ref_eq {X:set} {H:DecidableEquality X} : RefutativeEquality X := H.
Coercion dec_eq_strong {X:set} `{!DecidableEquality X} : StrongSet X := dec_trans_strong (=).

Lemma dec_strong_op_l `(f:X ‚äó Y ‚áæ Z) `{!DecidableEquality X} : StrongOp f.
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. change (x‚ÇÅ = x‚ÇÇ ‚àß y‚ÇÅ = y‚ÇÇ ‚ä∏ f (x‚ÇÅ, y‚ÇÅ) = f (x‚ÇÇ, y‚ÇÇ)).
  rew (aand_aprod_dec_l _ _). exact (is_fun f (x‚ÇÅ, y‚ÇÅ) (x‚ÇÇ, y‚ÇÇ)).
Qed.

Lemma dec_strong_op_r `(f:X ‚äó Y ‚áæ Z) `{!DecidableEquality Y} : StrongOp f.
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. change (x‚ÇÅ = x‚ÇÇ ‚àß y‚ÇÅ = y‚ÇÇ ‚ä∏ f (x‚ÇÅ, y‚ÇÅ) = f (x‚ÇÇ, y‚ÇÇ)).
  rew (aand_aprod_dec_r _ _). exact (is_fun f (x‚ÇÅ, y‚ÇÅ) (x‚ÇÇ, y‚ÇÇ)).
Qed.


Definition unit_eq_dec : Dec (A:=ùüè) (=) := Œª x y, true.
Global Hint Extern 1 (Dec (A:=unit) (=)) => refine unit_eq_dec : typeclass_instances.
Global Hint Extern 1 (Dec (A:=set_T ùüè) (=)) => refine unit_eq_dec : typeclass_instances.
Lemma unit_is_dec_eq : IsDecEq ùüè. Proof. tautological. Qed.
Global Hint Extern 1 (IsDecEq ùüè) => refine unit_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (DecidableEquality ùüè) => refine unit_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (AffirmativeEquality ùüè) => refine unit_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (RefutativeEquality ùüè) => refine unit_is_dec_eq : typeclass_instances.


Definition empty_eq_dec : Dec (A:=ùüé) (=) := Œª x y, true.
Global Hint Extern 1 (Dec (A:=empty) (=)) => refine empty_eq_dec : typeclass_instances.
Global Hint Extern 1 (Dec (A:=set_T ùüé) (=)) => refine empty_eq_dec : typeclass_instances.
Lemma empty_is_dec_eq : IsDecEq ùüé. Proof. tautological. Qed.
Global Hint Extern 1 (IsDecEq ùüé) => refine empty_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (DecidableEquality ùüé) => refine empty_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (AffirmativeEquality ùüé) => refine empty_is_dec_eq : typeclass_instances.
Global Hint Extern 1 (RefutativeEquality ùüé) => refine empty_is_dec_eq : typeclass_instances.


Definition strong_set_make A {Ae: Equiv A}
  `{!Reflexive (A:=A) (=)}
  `{!Symmetric (A:=A) (=)}
  `{!StronglyTransitive (A:=A) (=)}
:= make_strong_set (@set_make A Ae (Build_Equivalence _ _ _ _)).

Lemma func_proper_equiv {X Y} {f g : func X Y} {x‚ÇÅ x‚ÇÇ : X} :
  (f = g) ‚Üí (x‚ÇÅ = x‚ÇÇ) ‚Üí (f x‚ÇÅ = g x‚ÇÇ).
Proof. intros Ef Ex. trans (g x‚ÇÅ); [ exact (Ef x‚ÇÅ) | now apply (is_fun g _ _)]. Qed.
Global Hint Extern 2 (apos (func_op _ _ = _)) => sapply_2 func_proper_equiv : proper.

Global Hint Extern 10 (apos (?f ?x‚ÇÅ ?x‚ÇÇ ?x‚ÇÉ = ?f ?y‚ÇÅ ?y‚ÇÇ ?y‚ÇÉ :> ?A)) =>
  let f' := eval red in (@id (func _ _) (eval_tuncurry3 f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ) = f' (y‚ÇÅ, y‚ÇÇ, y‚ÇÉ) :> A) : proper.
Global Hint Extern 11 (apos (?f ?x‚ÇÅ ?x‚ÇÇ = ?f ?y‚ÇÅ ?y‚ÇÇ :> ?A)) =>
  let f' := eval red in (@id (func _ _) (tuncurry f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ) = f' (y‚ÇÅ, y‚ÇÇ) :> A) : proper.
Global Hint Extern 12 (apos (?f ?x = ?f ?y :> ?A)) =>
  let f' := eval red in (@id (func _ _) f) in
  progress change (f' x = f' y :> A) : proper.


Section functions.
  Lemma func_set_Strong {X Y} `{!StrongSet Y} : StrongSet (X ‚áæ Y).
  Proof. intros f g h.
    change ((‚àè x, f x = g x) ‚àß (‚àè x, g x = h x) ‚ä∏ (‚àè x, f x = h x)).
    apply all_adj. intros x.
    rew [(all_lb _ x) | (all_lb _ x)].
    now apply strong_transitivity.
  Qed.

  Lemma func_set_refutative {X Y} `{!RefutativeEquality Y} : RefutativeEquality (X ‚áæ Y).
  Proof. intros f g. now change (Refutative (‚àè x, f x = g x)). Qed.
End functions.
Global Hint Extern 2 (StrongSet (_ ‚áæ _)) => eapply func_set_Strong : typeclass_instances.
Global Hint Extern 2 (RefutativeEquality (_ ‚áæ _)) => eapply func_set_refutative : typeclass_instances.


(** [Œ©] forms a set with ‚ßü as equality *)

Global Hint Extern 1 (Equiv Œ©) => exact aiff : typeclass_instances.
Global Hint Extern 1 (IsSet Œ©) => echange (Equivalence aiff) : typeclass_instances.
Canonical Structure AProp_set := set_make Œ©.
Notation "'Œ©'" := AProp_set (only printing) : set_scope.

Import projection_notation.

Definition anot_is_fun  : @IsFun Œ© Œ© anot := tautology.
Definition aand_is_fun  : @IsFun (Œ© √ó Œ©) Œ© (Œª P, aand  (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition aor_is_fun   : @IsFun (Œ© √ó Œ©) Œ© (Œª P, aor   (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition aprod_is_fun : @IsFun (Œ© ‚äó Œ©) Œ© (Œª P, aprod (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition apar_is_fun  : @IsFun (Œ© ‚äó Œ©) Œ© (Œª P, apar  (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition aimpl_is_fun : @IsFun (Œ© ‚äó Œ©) Œ© (Œª P, aimpl (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition aiff_is_fun  : @IsFun (Œ© ‚äó Œ©) Œ© (Œª P, aiff  (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Canonical Structure anot_fun  := @make_fun _ _ _ anot_is_fun.
Canonical Structure aand_fun  := @make_fun _ _ _ aand_is_fun.
Canonical Structure aor_fun   := @make_fun _ _ _ aor_is_fun.
Canonical Structure aprod_fun := @make_fun _ _ _ aprod_is_fun.
Canonical Structure apar_fun  := @make_fun _ _ _ apar_is_fun.
Canonical Structure aimpl_fun := @make_fun _ _ _ aimpl_is_fun.
Canonical Structure aiff_fun  := @make_fun _ _ _ aiff_is_fun.

Lemma all_is_fun {X} : @IsFun (X ‚áæ Œ©) Œ© all.  Proof. hnf; intros; apply all_aiff. Qed.
Lemma aex_is_fun {X} : @IsFun (X ‚áæ Œ©) Œ© aex.  Proof. hnf; intros; apply aex_aiff. Qed.
Canonical Structure all_fun {X} := @make_fun _ _ _ (@all_is_fun X).
Canonical Structure aex_fun {X} := @make_fun _ _ _ (@aex_is_fun X).

Notation "(‚àß)" := aand_fun : set_scope.
Notation "(‚à®)" := aor_fun : set_scope.
Notation "(‚ä†)" := aprod_fun : set_scope.
Notation "(‚äû)" := aor_fun : set_scope.
Notation "(·óÆ)" := anot_fun : set_scope.

Lemma eq_is_fun {X} : @IsFun (X ‚äó X) Œ© (Œª p, œÄ‚ÇÅ p = œÄ‚ÇÇ p).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ].
  change ( (x‚ÇÅ, y‚ÇÅ) = (x‚ÇÇ, y‚ÇÇ) ) with ( x‚ÇÅ = x‚ÇÇ ‚ä† y‚ÇÅ = y‚ÇÇ ).
  unfold œÄ‚ÇÅ, œÄ‚ÇÇ. apply aand_intro; rew <-(aprod_adj _ _ _).
  + rew (aprod_assoc _ _ _).
    rew (aprod_com _ (x‚ÇÅ = y‚ÇÅ)), (transitivity (=) _ _ _).
    rew (symmetry_iff (=) x‚ÇÅ x‚ÇÇ). exact (transitivity (=) _ _ _).
  + rew (symmetry_iff (=) y‚ÇÅ y‚ÇÇ). rew (aprod_assoc _ _ _).
    rew (aprod_com _ (x‚ÇÇ = y‚ÇÇ)), (transitivity (=) _ _ _).
    exact (transitivity (=) _ _ _).
Qed.

Canonical Structure eq_fun {X} : X ‚äó X ‚áæ Œ© := @make_fun _ _ _ (@eq_is_fun X).
Notation "x = y" := (func_op eq_fun (x, y)) (only printing) : set_scope.

Lemma eq_fun_strong `{!StrongSet X} : StrongOp (@eq_fun X).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ].
  change (x‚ÇÅ = x‚ÇÇ ‚àß y‚ÇÅ = y‚ÇÇ ‚ä∏ (x‚ÇÅ = y‚ÇÅ ‚ßü x‚ÇÇ = y‚ÇÇ)). apply aand_intro; rew <-(aprod_adj _ _ _).
  + rew <-(strong_transitivity (=) x‚ÇÇ y‚ÇÅ y‚ÇÇ). apply aand_intro; [| tautological].
    rew (aandl _ _ ), (symmetry_iff (=) x‚ÇÅ x‚ÇÇ). exact (transitivity (=) _ _ _).
  + rew <-(strong_transitivity (=) x‚ÇÅ x‚ÇÇ y‚ÇÅ). apply aand_intro; [tautological|].
    rew (aandr _ _ ), (aprod_com _ _), (symmetry_iff (=) y‚ÇÅ y‚ÇÇ). exact (transitivity (=) _ _ _).
Qed.
Global Hint Extern 2 (StrongOp eq_fun) => simple notypeclasses refine eq_fun_strong : typeclass_instances.

Global Hint Extern 10 (apos (func_op ?f ?x ‚ä∏ func_op ?f ?y)) =>
  sapply_1 (andl (aimpl_subrel_aiff (func_op f x) (func_op f y)));
  change (func_op f x = func_op f y :> AProp_set) : proper.
Global Hint Extern 2 (apos (func_op ?f ?x ‚ßü func_op ?f ?y)) =>
  change (func_op f x = func_op f y :> AProp_set) : proper.

Global Hint Extern 20 (apos (?f ?x‚ÇÅ ?x‚ÇÇ ?x‚ÇÉ ‚ä∏ ?f ?y‚ÇÅ ?y‚ÇÇ ?y‚ÇÉ)) =>
  let f' := eval red in (@id (func _ _) (eval_tuncurry3 f)) in
  sapply_1 (andl (aimpl_subrel_aiff (f x‚ÇÅ x‚ÇÇ x‚ÇÉ) (f y‚ÇÅ y‚ÇÇ y‚ÇÉ)));
  change (f' (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ) = f' (y‚ÇÅ, y‚ÇÇ, y‚ÇÉ) :> AProp_set) : proper.
Global Hint Extern 21 (apos (?f ?x‚ÇÅ ?x‚ÇÇ ‚ä∏ ?f ?y‚ÇÅ ?y‚ÇÇ)) =>
  let f' := eval red in (@id (func _ _) (tuncurry f)) in
  sapply_1 (andl (aimpl_subrel_aiff (f x‚ÇÅ x‚ÇÇ) (f y‚ÇÅ y‚ÇÇ)));
  change (f' (x‚ÇÅ, x‚ÇÇ) = f' (y‚ÇÅ, y‚ÇÇ) :> AProp_set) : proper.
Global Hint Extern 22 (apos (?f ?x ‚ä∏ ?f ?y)) =>
  let f' := eval red in (@id (func _ _) f) in
  sapply_1 (andl (aimpl_subrel_aiff (f x) (f y)));
  change (f' x = f' y :> AProp_set) : proper.

Global Hint Extern 10 (apos (?f ?x‚ÇÅ ?x‚ÇÇ ?x‚ÇÉ ‚ßü ?f ?y‚ÇÅ ?y‚ÇÇ ?y‚ÇÉ)) =>
  let f' := eval red in (@id (func _ _) (eval_tuncurry3 f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ) = f' (y‚ÇÅ, y‚ÇÇ, y‚ÇÉ) :> AProp_set) : proper.
Global Hint Extern 11 (apos (?f ?x‚ÇÅ ?x‚ÇÇ ‚ßü ?f ?y‚ÇÅ ?y‚ÇÇ)) =>
  let f' := eval red in (@id (func _ _) (tuncurry f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ) = f' (y‚ÇÅ, y‚ÇÇ) :> AProp_set) : proper.
Global Hint Extern 12 (apos (?f ?x ‚ßü ?f ?y)) =>
  let f' := eval red in (@id (func _ _) f) in
  change (f' x = f' y :> AProp_set) : proper.


(** [SProp] forms a set with [‚Üî] as equality *)

Global Hint Extern 1 (Equiv SProp) => exact (of_course_rel iff) : typeclass_instances.
Global Hint Extern 1 (IsSet SProp) => echange (Equivalence (of_course_rel iff)) : typeclass_instances.
Canonical Structure SProp_set := set_make SProp.

Definition SProp_set_aff_eq : AffirmativeEquality SProp_set := tautology.
Global Hint Extern 2 (AffirmativeEquality SProp_set) => simple notypeclasses refine AffirmativeEquality : typeclass_instances.

Definition not_is_fun : @IsFun SProp SProp not := tautology.
Definition and_is_fun : @IsFun (SProp ‚äó SProp) SProp (Œª P, and  (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Definition or_is_fun : @IsFun (SProp ‚äó SProp) SProp (Œª P, or  (œÄ‚ÇÅ P) (œÄ‚ÇÇ P)) := tautology.
Canonical Structure not_fun := @make_fun _ _ _ not_is_fun.
Canonical Structure and_fun  := @make_fun _ _ _ and_is_fun.
Canonical Structure or_fun   := @make_fun _ _ _ or_is_fun.

(*Lemma ex_is_fun {X} : @IsFun (of_course_set (X ‚áæ SProp)) SProp ex.
Proof. intros P Q. apply affirmative_aimpl. tautological. Qed.
Canonical Structure ex_fun {X} := @make_fun _ _ _ (@ex_is_fun X).*)

Definition of_course_is_fun : @IsFun SProp Œ© of_course := tautology.
Canonical Structure of_course_fun := @make_fun _ _ _ of_course_is_fun.

Definition apos_is_fun : @IsFun !Œ© SProp apos := tautology.
Canonical Structure apos_fun := @make_fun _ _ _ apos_is_fun.

Global Hint Extern 10 (impl (func_op ?f ?x) (func_op ?f ?y)) =>
  sapply_1 (srelations.impl_sSubrelation_iff (func_op f x) (func_op f y));
  change (func_op f x = func_op f y :> SProp_set) : proper.
Global Hint Extern 2 (iff (func_op ?f ?x) (func_op ?f ?y)) =>
  change (func_op f x = func_op f y :> SProp_set) : proper.

Global Hint Extern 20 (impl (?f ?x‚ÇÅ ?x‚ÇÇ ?x‚ÇÉ) (?f ?y‚ÇÅ ?y‚ÇÇ ?y‚ÇÉ)) =>
  let f' := eval red in (@id (func _ _) (eval_tuncurry3 f)) in
  sapply_1 (srelations.impl_sSubrelation_iff (f x‚ÇÅ x‚ÇÇ x‚ÇÉ) (f y‚ÇÅ y‚ÇÇ y‚ÇÉ));
  change (f' (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ) = f' (y‚ÇÅ, y‚ÇÇ, y‚ÇÉ) :> SProp_set) : proper.
Global Hint Extern 21 (impl (?f ?x‚ÇÅ ?x‚ÇÇ) (?f ?y‚ÇÅ ?y‚ÇÇ)) =>
  let f' := eval red in (@id (func _ _) (tuncurry f)) in
  sapply_1 (srelations.impl_sSubrelation_iff (f x‚ÇÅ x‚ÇÇ) (f y‚ÇÅ y‚ÇÇ));
  change (f' (x‚ÇÅ, x‚ÇÇ) = f' (y‚ÇÅ, y‚ÇÇ) :> SProp_set) : proper.
Global Hint Extern 22 (impl (?f ?x) (?f ?y)) =>
  let f' := eval red in (@id (func _ _) f) in
  sapply_1 (srelations.impl_sSubrelation_iff (f x) (f y));
  change (f' x = f' y :> SProp_set) : proper.

Global Hint Extern 10 (iff (?f ?x‚ÇÅ ?x‚ÇÇ ?x‚ÇÉ) (?f ?y‚ÇÅ ?y‚ÇÇ ?y‚ÇÉ)) =>
  let f' := eval red in (@id (func _ _) (eval_tuncurry3 f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ, x‚ÇÉ) = f' (y‚ÇÅ, y‚ÇÇ, y‚ÇÉ) :> SProp_set) : proper.
Global Hint Extern 11 (iff (?f ?x‚ÇÅ ?x‚ÇÇ) (?f ?y‚ÇÅ ?y‚ÇÇ)) =>
  let f' := eval red in (@id (func _ _) (tuncurry f)) in
  change (f' (x‚ÇÅ, x‚ÇÇ) = f' (y‚ÇÅ, y‚ÇÇ) :> SProp_set) : proper.
Global Hint Extern 12 (iff (?f ?x) (?f ?y)) =>
  let f' := eval red in (@id (func _ _) f) in
  change (f' x = f' y :> SProp_set) : proper.


Definition IsWeakSPred {X : set} (P:X ‚Üí SProp) : (‚àÄ x y, x = y ‚Üí P x ‚Üí P y) ‚Üí @IsFun !X SProp P.
Proof. intros H. refine (IsWeakFun _ _). intros ?? E; split; now apply H. Qed.
Definition make_weak_spred {X : set} (P:X ‚Üí SProp) (H:‚àÄ x y, x = y ‚Üí P x ‚Üí P y) : !X ‚áæ SProp
:= @make_fun (of_course_set X) _ P (IsWeakSPred P H).

Definition IsWeakSPred2 {X Y : set} (P:X ‚Üí Y ‚Üí SProp) : (‚àÄ x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ, x‚ÇÅ = x‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ ‚Üí P x‚ÇÅ y‚ÇÅ ‚Üí P x‚ÇÇ y‚ÇÇ)
  ‚Üí @IsFun (!X ‚äó !Y) SProp (tuncurry P).
Proof. intros H.
  enough (@IsFun !(X ‚äó Y) SProp (tuncurry P)) by exact (is_fun (@make_fun !(X ‚äó Y) SProp (tuncurry P) _ ‚àò of_course_tensor_set_inv _ _)).
  refine (IsWeakFun _ _). intros [??][??] [??]; split; now apply H.
Qed.
Definition make_weak_spred2 {X Y : set} (P:X ‚Üí Y ‚Üí SProp) (H:‚àÄ x‚ÇÅ x‚ÇÇ y‚ÇÅ y‚ÇÇ, x‚ÇÅ = x‚ÇÇ ‚Üí y‚ÇÅ = y‚ÇÇ ‚Üí P x‚ÇÅ y‚ÇÅ ‚Üí P x‚ÇÇ y‚ÇÇ)
  : !X ‚äó !Y ‚áæ SProp
:= @make_fun (!X ‚äó !Y) _ (Œª p, P (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)) (IsWeakSPred2 P H).


(** jections *)

Local Open Scope fun_inv_scope.

Lemma Injective_proper_impl {X Y} {f g : X ‚áæ Y} : f = g ‚Üí impl (Injective f) (Injective g).
Proof. intro E; unfold Injective; now rew E. Qed.
Canonical Structure Injective_fun {X Y} : !(X ‚áæ Y) ‚áæ SProp :=  make_weak_spred Injective (@Injective_proper_impl X Y).

Lemma Surjective_proper_impl {X Y} {f g : X ‚áæ Y} {fi gi : Y ‚áæ X } : f = g ‚Üí fi = gi ‚Üí impl (Surjective f (inv:=fi)) (Surjective g (inv:=gi)).
Proof. intros E1 E2; unfold Surjective, inverse. now rew [ E1 | E2 ]. Qed.
Canonical Structure Surjective_fun {X Y} :=  make_weak_spred2 Surjective (@Surjective_proper_impl X Y).

Lemma Bijective_proper_impl {X Y} {f g : X ‚áæ Y} {fi gi : Y ‚áæ X } : f = g ‚Üí fi = gi ‚Üí impl (Bijective f (inv:=fi)) (Bijective g (inv:=gi)).
Proof. intros E1 E2 [??]; split.
+ now rew <-E1.
+ now rew [ <-E1 | <-E2 ].
Qed.
Canonical Structure Bijective_fun {X Y} :=  make_weak_spred2 Bijective (@Bijective_proper_impl X Y).

Lemma injective_iff {X Y} (f:X ‚áæ Y) `{!Injective f} x y : x = y ‚ßü f x = f y.
Proof. split; [ exact (is_fun f _ _) | exact (injective f _ _) ]. Qed.

Lemma injective_compose_cancel {X Y Z} (f : Y ‚áæ Z)  (g h : X ‚áæ Y)
  `{!Injective f} : f ‚àò g = f ‚àò h ‚ä∏ g = h.
Proof. change ((‚àè x, f (g x) = f (h x)) ‚ä∏ ‚àè x, g x = h x).
  apply all_adj. intros x. rew (all_lb _ x). exact (injective f _ _).
Qed.

Definition surjective_applied `{Surjective (f:=f)} y : f (f‚Åª¬π y) = y := surjective f y.
Arguments surjective_applied {_ _} f {_ _} _.

Lemma surjective_compose_cancel {X Y Z} (f : X ‚áæ Y) `{!Inverse f} (g h : Y ‚áæ Z)
  `{!Surjective f} : g ‚àò f = h ‚àò f ‚ä∏ g = h.
Proof.
  change ((‚àè x, g (f x) = h (f x)) ‚ä∏ ‚àè y, g y = h y).
  apply all_adj. intros y. rew (all_lb _ (f‚Åª¬π y)).
  now rew (surjective_applied f _).
Qed.

Lemma bijective_applied `{Bijective (f:=f)} x : f‚Åª¬π (f x) = x.
Proof. apply (injective f _ _). exact (surjective f _). Qed.

Lemma bijective `{Bijective (f:=f)} : f‚Åª¬π ‚àò f = id_fun _.
Proof bijective_applied.

Arguments bijective_applied {_ _} f {_ _} x.
Arguments bijective {_ _} f {_ _}.

Global Hint Extern 2 (Inverse (id_fun ?X)) => refine (id_fun X) : typeclass_instances.
Lemma id_bijective {X} : Bijective (id_fun X).  Proof. now split. Qed.
Global Hint Extern 2 (Bijective  (id_fun _)) => simple notypeclasses refine id_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (id_fun _)) => simple notypeclasses refine id_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (id_fun _)) => simple notypeclasses refine id_bijective : typeclass_instances.

Section compositions.
  (*Universes i.
  (ontext {X Y Z : set@{i}}.
  Context {f: X ‚áæ Y} {g: Y ‚áæ Z} `{!Inverse f} `{!Inverse g}. *)

  Instance compose_injective {X Y Z} {f: X ‚áæ Y} {g: Y ‚áæ Z} : Injective f ‚Üí Injective g ‚Üí Injective (g ‚àò f).
  Proof. intros ?? x y. change (func_op (g ‚àò f) ?x) with (g (f x)).
    rew (injective g _ _). exact (injective f _ _).
  Qed.

  Instance compose_surjective {X Y Z} {f: X ‚áæ Y} {g: Y ‚áæ Z} `{!Inverse f} `{!Inverse g} : Surjective f ‚Üí Surjective g ‚Üí Surjective (g ‚àò f).
  Proof. intros ?? z. change (g (f (f‚Åª¬π (g‚Åª¬π z))) = z).
    rew (surjective_applied f _). exact (surjective g _).
  Qed.

  Instance compose_bijective {X Y Z} {f: X ‚áæ Y} {g: Y ‚áæ Z} `{!Inverse f} `{!Inverse g} : Bijective f ‚Üí Bijective g ‚Üí Bijective (g ‚àò f).
  Proof. intros; now split. Qed.
End compositions.
Global Hint Extern 4 (Injective  (_ ‚àò _)) => simple notypeclasses refine (compose_injective  _ _)  : typeclass_instances.
Global Hint Extern 4 (Surjective (_ ‚àò _)) => simple notypeclasses refine (compose_surjective _ _)  : typeclass_instances.
Global Hint Extern 4 (Bijective  (_ ‚àò _)) => simple notypeclasses refine (compose_bijective  _ _)  : typeclass_instances.

Lemma alt_Build_Injective `(f: X ‚áæ Y) `{!Inverse f} : f‚Åª¬π ‚àò f = id_fun _ ‚Üí Injective f.
Proof.
  intros E x y.
  rew <-exact:(E x : f‚Åª¬π (f x) = x) at 2.
  rew <-exact:(E y : f‚Åª¬π (f y) = y) at 2.
  exact (is_fun _ _ _).
Qed.

Lemma alt_Build_Bijective `(f: X ‚áæ Y) `{!Inverse f} :
  f‚Åª¬π ‚àò f = id_fun _ ‚Üí f ‚àò f‚Åª¬π = id_fun _ ‚Üí Bijective f.
Proof. intros. split; trivial. now apply (alt_Build_Injective f). Qed.

Global Hint Extern 4 (Inverse (?f ‚Åª¬π)) => refine f : typeclass_instances.

Lemma flip_bijection `(f: X ‚áæ Y) `{!Inverse f} `{!Bijective f} : Bijective f‚Åª¬π.
Proof. apply alt_Build_Bijective. exact (surjective f). exact (bijective f). Qed.
Global Hint Extern 4 (Bijective _‚Åª¬π) => simple notypeclasses refine (flip_bijection _) : typeclass_instances.
Global Hint Extern 8 (Injective _‚Åª¬π) => simple notypeclasses refine (flip_bijection _) : typeclass_instances.
Global Hint Extern 8 (Surjective _‚Åª¬π) => simple notypeclasses refine (flip_bijection _) : typeclass_instances.

Lemma inverse_involutive `(f : X ‚áæ Y) `{!Inverse f} : (f‚Åª¬π)‚Åª¬π = f.
Proof reflexivity (=) _.

Lemma flip_bijection_back `(f: X ‚áæ Y) `{!Inverse f} : Bijective f‚Åª¬π ‚Üí Bijective f.
Proof Œª _, _: Bijective (f‚Åª¬π‚Åª¬π).


Lemma of_course_tensor_set_bijective {X Y} : Bijective (of_course_tensor_set X Y).
Proof. now apply alt_Build_Bijective. Qed.
Lemma of_course_tensor_set_inv_bijective {X Y} : Bijective (of_course_tensor_set_inv X Y).
Proof. now apply alt_Build_Bijective. Qed.

Global Hint Extern 2 (Bijective  (of_course_tensor_set ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (of_course_tensor_set ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (of_course_tensor_set ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_bijective : typeclass_instances.
Global Hint Extern 2 (Bijective  (of_course_tensor_set_inv ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_inv_bijective  : typeclass_instances.
Global Hint Extern 2 (Injective  (of_course_tensor_set_inv ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_inv_bijective  : typeclass_instances.
Global Hint Extern 2 (Surjective (of_course_tensor_set_inv ?X ?Y)) => simple notypeclasses refine of_course_tensor_set_inv_bijective  : typeclass_instances.


Section product.
  (*Universes i.
  Context (X Y : set@{i}).*)

  Local Instance tensor_to_prod_is_fun {X Y} : @IsFun (X‚äóY) (X√óY) id.
  Proof. intros [x‚ÇÅ y‚ÇÅ] [x‚ÇÇ y‚ÇÇ]. refine (aprod_aand _ _). Qed.
  Definition tensor_to_prod X Y : X‚äóY ‚áæ X√óY := @make_fun (X‚äóY) (X√óY) id _.

  Local Instance prod_proj1_is_fun {X Y} : @IsFun (X√óY) X œÄ‚ÇÅ.
  Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. exact (aandl _ _). Qed.
  Local Instance prod_proj2_is_fun {X Y} : @IsFun (X√óY) Y œÄ‚ÇÇ.
  Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. exact (aandr _ _). Qed.
  Definition prod_proj1 X Y := @make_fun (X√óY) X œÄ‚ÇÅ prod_proj1_is_fun.
  Definition prod_proj2 X Y := @make_fun (X√óY) Y œÄ‚ÇÇ prod_proj2_is_fun.

  Local Instance tensor_proj1_is_fun {X Y} : @IsFun (X ‚äó Y) X œÄ‚ÇÅ.  Proof. exact (is_fun (prod_proj1 X Y ‚àò tensor_to_prod X Y)). Qed.
  Local Instance tensor_proj2_is_fun {X Y} : @IsFun (X ‚äó Y) Y œÄ‚ÇÇ.  Proof. exact (is_fun (prod_proj2 X Y ‚àò tensor_to_prod X Y)). Qed.

  Definition tensor_proj1 X Y := @make_fun (X ‚äó Y) X _ tensor_proj1_is_fun.
  Definition tensor_proj2 X Y := @make_fun (X ‚äó Y) Y _ tensor_proj2_is_fun.
End product.
Canonical tensor_proj1.
Canonical tensor_proj2.
Global Hint Extern 1 (Cast (?X ‚äó ?Y) (?X √ó ?Y)) => notypeclasses refine (tensor_to_prod X Y) : typeclass_instances.

Global Hint Extern 1 (StrongOp (?f ‚àò tensor_to_prod _ _)) => simple notypeclasses refine (is_fun f) : typeclass_instances.

Global Hint Extern 4 (apos (proj1 ?x = proj1 ?y)) =>
  lazymatch type of x with
  | set_T (_ ‚äó _) => change (apos (tensor_proj1 _ _ x = tensor_proj1 _ _ y))
  | set_T (_ √ó _) => change (apos (prod_proj1 _ _ x = prod_proj1 _ _ y))
  end : proper.

Global Hint Extern 4 (apos (proj2 ?x = proj2 ?y)) =>
  lazymatch type of x with
  | set_T (_ ‚äó _) => change (apos (tensor_proj2 _ _ x = tensor_proj2 _ _ y))
  | set_T (_ √ó _) => change (apos (prod_proj2 _ _ x = prod_proj2 _ _ y))
  end : proper.


Ltac unfold_pair_eq :=
  try change ( (?a, ?b) = (?c, ?d) :> set_T (_ √ó _) ) with (aand (a = c) (b = d));
  try change ( (?a, ?b) = (?c, ?d) :> set_T (_ ‚äó _) ) with (a = c ‚ä† b = d).

Lemma tensor_dec_eq `{DecidableEquality X} `{DecidableEquality Y}
  : DecidableEquality (X ‚äó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. now unfold_pair_eq. Qed.
Global Hint Extern 2 (DecidableEquality (_ ‚äó _)) => simple notypeclasses refine tensor_dec_eq : typeclass_instances. 

Lemma tensor_affirmative_eq `{AffirmativeEquality X} `{AffirmativeEquality Y}
  : AffirmativeEquality (X ‚äó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. now unfold_pair_eq. Qed.
Global Hint Extern 2 (AffirmativeEquality (_ ‚äó _)) => simple notypeclasses refine tensor_affirmative_eq : typeclass_instances. 

Lemma tensor_refutative_eq `{RefutativeEquality X} `{RefutativeEquality Y}
  : RefutativeEquality (X ‚äó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. now unfold_pair_eq. Qed.
Global Hint Extern 2 (RefutativeEquality (_ ‚äó _)) => simple notypeclasses refine tensor_refutative_eq : typeclass_instances. 

Lemma prod_dec_eq `{DecidableEquality X} `{DecidableEquality Y}
  : DecidableEquality (X √ó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. now unfold_pair_eq. Qed.
Global Hint Extern 2 (DecidableEquality (_ √ó _)) => simple notypeclasses refine prod_dec_eq : typeclass_instances. 

Lemma prod_refutative_eq `{RefutativeEquality X} `{RefutativeEquality Y}
  : RefutativeEquality (X √ó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. now unfold_pair_eq. Qed.
Global Hint Extern 2 (RefutativeEquality (_ √ó _)) => simple notypeclasses refine prod_refutative_eq : typeclass_instances. 

Lemma prod_strong_set `{StrongSet X} `{StrongSet Y}
  : StrongSet (X √ó Y).
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ][x‚ÇÉ y‚ÇÉ]. unfold_pair_eq. apply aand_intro.
  + rew [ (aandl (x‚ÇÅ = x‚ÇÇ) _) | (aandl (x‚ÇÇ = x‚ÇÉ) _) ]. now apply strong_transitivity.
  + rew [ (aandr (x‚ÇÅ = x‚ÇÇ) _) | (aandr (x‚ÇÇ = x‚ÇÉ) _) ]. now apply strong_transitivity.
Qed.
Global Hint Extern 2 (StrongSet (_ √ó _)) => simple notypeclasses refine prod_strong_set : typeclass_instances. 


Section to_prod.
  (*Universes i.
  Context {X Y Z : set@{i}}.*)
  Local Notation œÄ‚ÇÅ := (prod_proj1 _ _).
  Local Notation œÄ‚ÇÇ := (prod_proj2 _ _).

  Local Instance to_prod_is_fun1 {X Y Z} (f:Z ‚áæ X) (g:Z ‚áæ Y) : @IsFun Z (X √ó Y) (Œª z, (f z, g z)).
  Proof. intros z‚ÇÅ z‚ÇÇ. change (z‚ÇÅ = z‚ÇÇ ‚ä∏ f z‚ÇÅ = f z‚ÇÇ ‚àß g z‚ÇÅ = g z‚ÇÇ).
    rew [<-(is_fun f _ _) | <-(is_fun g _ _)]. now apply aand_intro.
  Qed.
  Local Notation pr X Y Z f g := (make_fun (Œª z : Z, (f z, g z) : X √ó Y)).

  Local Instance to_prod_is_fun2 {X Y Z : set} : @IsFun ((Z ‚áæ X) √ó (Z ‚áæ Y)) (Z ‚áæ X √ó Y)
    (Œª p, pr X Y Z (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)).
  Proof. intros [f‚ÇÅ g‚ÇÅ][f‚ÇÇ g‚ÇÇ].
    change ((‚àè z, f‚ÇÅ z = f‚ÇÇ z) ‚àß (‚àè z, g‚ÇÅ z = g‚ÇÇ z) ‚ä∏ ‚àè z, f‚ÇÅ z = f‚ÇÇ z ‚àß g‚ÇÅ z = g‚ÇÇ z).
    rew <-all_adj; intro z; refine (aand_proper_aimpl _ _); exact (all_lb _ _).
  Qed.
  Definition to_prod {X Y Z : set} := @make_fun ((Z ‚áæ X) √ó (Z ‚áæ Y)) (Z ‚áæ X √ó Y) _ to_prod_is_fun2.
End to_prod.
Definition prod_diag X := to_prod (id_fun X, id_fun X).

Lemma tensor_diag_is_fun `{!AffirmativeEquality X} : @IsFun X (X ‚äó X) (Œª x, (x, x)).
Proof. intros x y. apply affirmative_aimpl. intro E. now rew E. Qed.
Definition tensor_diag X `{!AffirmativeEquality X} : X ‚áæ X ‚äó X := @make_fun _ _ _ tensor_diag_is_fun.

Lemma coordinatewise_is_fun {X Y Z : set} `(f:(X ‚äó Y)%set ‚Üí Z) :
    (‚àÄ x‚ÇÅ x‚ÇÇ y, x‚ÇÅ = x‚ÇÇ ‚ä∏ f(x‚ÇÅ, y) = f(x‚ÇÇ, y))
  ‚Üí (‚àÄ x y‚ÇÅ y‚ÇÇ, y‚ÇÅ = y‚ÇÇ ‚ä∏ f(x, y‚ÇÅ) = f(x, y‚ÇÇ))
  ‚Üí IsFun f.
Proof. intros Px Py [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]; unfold_pair_eq.
  rew <-(transitivity (=) _ (f(x‚ÇÇ,y‚ÇÅ)) _).
  refine (aprod_proper_aimpl _ _); [ apply Px | apply Py ].
Qed.

Lemma commutative_is_fun {X Z : set} `(f:(X ‚äó X)%set ‚Üí Z) :
    (‚àÄ x y, f(x, y) = f(y, x))
  ‚Üí (‚àÄ x‚ÇÅ x‚ÇÇ y, x‚ÇÅ = x‚ÇÇ ‚ä∏ f(x‚ÇÅ, y) = f(x‚ÇÇ, y))
  ‚Üí IsFun f.
Proof. intros P H. apply coordinatewise_is_fun; trivial.
  intros x y‚ÇÅ y‚ÇÇ. rew [ (P x y‚ÇÅ) | (P x y‚ÇÇ) ].
  now apply H.
Qed.

Section unit_empty.
  (*Universes i.
  Context (X:set@{i}).*)
  Definition from_Empty X : ùüé ‚áæ X.
  Proof. refine (func_make abort). intros x []. Defined.
  Definition to_Unit X : X ‚áæ ùüè.
  Proof. refine (func_make to_unit). intros x y. exact (aimpl_true _). Defined.
End unit_empty.
Canonical from_Empty.
Canonical to_Unit.
Global Hint Extern 2 (The (set_T ùüè)) => exact tt : typeclass_instances.
Global Hint Extern 2 (The (set_T (ùüé ‚áæ ?X))) => eapply from_Empty : typeclass_instances.
Global Hint Extern 2 (The (set_T (?X ‚áæ ùüè))) => eapply to_Unit : typeclass_instances.

Lemma empty_initial `(f:ùüé ‚áæ X) : f = the.  Proof. intros []. Qed.
Lemma unit_terminal `(f:X ‚áæ ùüè) : f = the.  Proof. easy. Qed.

Section swap.
  (*Universes i.
  Context (X Y : set@{i}).*)
  Local Notation swap := (Œª p, (œÄ‚ÇÇ p, œÄ‚ÇÅ p)).
  Local Instance tensor_swap_is_fun X Y : @IsFun (X ‚äó Y) (Y ‚äó X) swap.
  Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ].
    change (x‚ÇÅ = x‚ÇÇ ‚ä† y‚ÇÅ = y‚ÇÇ ‚ä∏ y‚ÇÅ = y‚ÇÇ ‚ä† x‚ÇÅ = x‚ÇÇ). now rew (aprod_com _ _).
  Qed.
  Local Instance prod_swap_is_fun X Y : @IsFun (X √ó Y) (Y √ó X) swap.
  Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ].
    change (x‚ÇÅ = x‚ÇÇ ‚àß y‚ÇÅ = y‚ÇÇ ‚ä∏ y‚ÇÅ = y‚ÇÇ ‚àß x‚ÇÅ = x‚ÇÇ). now rew (aand_com _ _).
  Qed.
  Definition tensor_swap X Y := @make_fun _ _ _ (tensor_swap_is_fun X Y).
  Definition prod_swap X Y := @make_fun _ _ _ (prod_swap_is_fun X Y).
End swap.

Global Hint Extern 2 (Inverse (tensor_swap ?X ?Y)) => eexact (tensor_swap Y X) : typeclass_instances.
Global Hint Extern 2 (Inverse (prod_swap ?X ?Y)) => eexact (prod_swap Y X) : typeclass_instances.


Lemma tensor_swap_bijective {X Y} : Bijective (tensor_swap X Y).
Proof. now apply alt_Build_Bijective. Qed.
Lemma prod_swap_bijective {X Y} : Bijective (prod_swap X Y).
Proof. now apply alt_Build_Bijective. Qed.

Global Hint Extern 2 (Bijective  (tensor_swap _ _)) => simple notypeclasses refine tensor_swap_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_swap _ _)) => simple notypeclasses refine tensor_swap_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_swap _ _)) => simple notypeclasses refine tensor_swap_bijective : typeclass_instances.
Global Hint Extern 2 (Bijective  (prod_swap _ _)) => simple notypeclasses refine prod_swap_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (prod_swap _ _)) => simple notypeclasses refine prod_swap_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (prod_swap _ _)) => simple notypeclasses refine prod_swap_bijective : typeclass_instances.


Section map.
  (*Universes i.
  Context {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ: set@{i}}.*)

  Local Instance tensor_map_is_fun1 {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} (f‚ÇÅ:X‚ÇÅ ‚áæ Y‚ÇÅ) (f‚ÇÇ:X‚ÇÇ ‚áæ Y‚ÇÇ) : @IsFun (X‚ÇÅ ‚äó X‚ÇÇ) (Y‚ÇÅ ‚äó Y‚ÇÇ) (Œª p, (f‚ÇÅ (œÄ‚ÇÅ p), f‚ÇÇ (œÄ‚ÇÇ p))).
  Proof. intros [x‚ÇÅ x‚ÇÇ][y‚ÇÅ y‚ÇÇ].
    change (x‚ÇÅ = y‚ÇÅ ‚ä† x‚ÇÇ = y‚ÇÇ ‚ä∏ f‚ÇÅ x‚ÇÅ = f‚ÇÅ y‚ÇÅ ‚ä† f‚ÇÇ x‚ÇÇ = f‚ÇÇ y‚ÇÇ).
    refine (aprod_proper_aimpl _ _); exact (is_fun _ _ _).
  Qed.
  Definition tensor_map_op {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} : (X‚ÇÅ ‚áæ Y‚ÇÅ) * (X‚ÇÇ ‚áæ Y‚ÇÇ) ‚Üí (X‚ÇÅ ‚äó X‚ÇÇ ‚áæ Y‚ÇÅ ‚äó Y‚ÇÇ) := Œª '(f‚ÇÅ, f‚ÇÇ), func_make (Œª p, (f‚ÇÅ (œÄ‚ÇÅ p), f‚ÇÇ (œÄ‚ÇÇ p))).

  Local Instance tensor_map_is_fun2 {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} : IsFun (@tensor_map_op X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ).
  Proof. intros [f‚ÇÅ f‚ÇÇ][g‚ÇÅ g‚ÇÇ].
    change ( (‚àè x, f‚ÇÅ x = g‚ÇÅ x) ‚ä† (‚àè y, f‚ÇÇ y = g‚ÇÇ y) ‚ä∏ ‚àè p, f‚ÇÅ (œÄ‚ÇÅ p) = g‚ÇÅ (œÄ‚ÇÅ p) ‚ä† f‚ÇÇ (œÄ‚ÇÇ p) = g‚ÇÇ (œÄ‚ÇÇ p)).
    rew <-all_adj; intros [x‚ÇÅ x‚ÇÇ]. refine (aprod_proper_aimpl _ _); exact (all_lb _ _).
  Qed.

  Definition tensor_map_fun {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} := @make_fun _ _ _ (@tensor_map_is_fun2 X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ).
End map.
Canonical tensor_map_fun.
Notation tensor_map f g := (tensor_map_op (@pair (set_T (_ ‚áæ _)) (set_T (_ ‚áæ _)) f g)).
Module tensor_map_notation.
  Notation "‚ü® a , b , .. , c ‚ü©" := (tensor_map .. (tensor_map a b) .. c ) (at level 0) : set_scope.
End tensor_map_notation.
Import tensor_map_notation.


Lemma tensor_map_injective {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} (f‚ÇÅ:X‚ÇÅ ‚áæ Y‚ÇÅ) (f‚ÇÇ:X‚ÇÇ ‚áæ Y‚ÇÇ)
  `{!Injective f‚ÇÅ} `{!Injective f‚ÇÇ} : Injective ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©.
Proof. intros [x‚ÇÅ x‚ÇÇ][y‚ÇÅ y‚ÇÇ].
  change (f‚ÇÅ x‚ÇÅ = f‚ÇÅ y‚ÇÅ ‚ä† f‚ÇÇ x‚ÇÇ = f‚ÇÇ y‚ÇÇ ‚ä∏ x‚ÇÅ = y‚ÇÅ ‚ä† x‚ÇÇ = y‚ÇÇ).
  refine (aprod_proper_aimpl _ _); exact (injective _ _ _).
Qed.
Global Hint Extern 2 (Injective ‚ü® _, _‚ü©) => simple notypeclasses refine (tensor_map_injective _ _) : typeclass_instances.
Global Hint Extern 2 (Injective (func_op tensor_map_fun _)) => simple notypeclasses refine (tensor_map_injective _ _) : typeclass_instances.


Global Hint Extern 2 (Inverse ‚ü®?f, ?g‚ü©) => eexact (‚ü®f‚Åª¬π, g‚Åª¬π‚ü©) : typeclass_instances.
Global Hint Extern 2 (Inverse (func_op tensor_map_fun (?f, ?g))) => eexact (‚ü®f‚Åª¬π, g‚Åª¬π‚ü©) : typeclass_instances.


Lemma tensor_map_surjective {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} (f‚ÇÅ:X‚ÇÅ ‚áæ Y‚ÇÅ) (f‚ÇÇ:X‚ÇÇ ‚áæ Y‚ÇÇ) `{!Inverse f‚ÇÅ} `{!Inverse f‚ÇÇ}
  `{!Surjective f‚ÇÅ} `{!Surjective f‚ÇÇ} : Surjective ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©.
Proof. change (‚ü®f‚ÇÅ ‚àò f‚ÇÅ‚Åª¬π, f‚ÇÇ ‚àò f‚ÇÇ‚Åª¬π‚ü© = ‚ü®id, id‚ü©).
  apply (is_fun _ _ _); split; exact (surjective _).
Qed.
Global Hint Extern 2 (Surjective ‚ü® _, _‚ü©) => simple notypeclasses refine (tensor_map_surjective _ _) : typeclass_instances.
Global Hint Extern 2 (Surjective (func_op tensor_map_fun _)) => simple notypeclasses refine (tensor_map_surjective _ _) : typeclass_instances.

Lemma tensor_map_bijective {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ} (f‚ÇÅ:X‚ÇÅ ‚áæ Y‚ÇÅ) (f‚ÇÇ:X‚ÇÇ ‚áæ Y‚ÇÇ) `{!Inverse f‚ÇÅ} `{!Inverse f‚ÇÇ}
  `{!Bijective f‚ÇÅ} `{!Bijective f‚ÇÇ} : Bijective ‚ü®f‚ÇÅ, f‚ÇÇ‚ü©.
Proof. now split. Qed.
Global Hint Extern 2 (Bijective ‚ü® _, _‚ü©) => simple notypeclasses refine (tensor_map_bijective _ _) : typeclass_instances.
Global Hint Extern 2 (Bijective (func_op tensor_map_fun _)) => simple notypeclasses refine (tensor_map_bijective _ _) : typeclass_instances.


Section assoc.
  (*Universes i.
  Context (X Y Z: set@{i}).*)

  Local Notation a‚Çó := (Œª p, (œÄ‚ÇÅ (œÄ‚ÇÅ p), (œÄ‚ÇÇ (œÄ‚ÇÅ p), œÄ‚ÇÇ p))).
  Local Notation a·µ£ := (Œª p, ((œÄ‚ÇÅ p, œÄ‚ÇÅ (œÄ‚ÇÇ p)), œÄ‚ÇÇ (œÄ‚ÇÇ p))).

  Local Instance tnsr_al_is_fun X Y Z : @IsFun (X‚äóY‚äóZ) (X‚äó(Y‚äóZ)) a‚Çó.
  Proof. intros [[x‚ÇÅ y‚ÇÅ] z‚ÇÅ] [[x‚ÇÇ y‚ÇÇ] z‚ÇÇ]. apply aprod_assoc. Qed.
  Local Instance tnsr_ar_is_fun X Y Z : @IsFun (X‚äó(Y‚äóZ)) (X‚äóY‚äóZ) a·µ£.
  Proof. intros [x‚ÇÅ [y‚ÇÅ z‚ÇÅ]] [x‚ÇÇ [y‚ÇÇ z‚ÇÇ]]. apply aprod_assoc. Qed.

  Local Instance prod_al_is_fun X Y Z : @IsFun (X√óY√óZ) (X√ó(Y√óZ)) a‚Çó.
  Proof. intros [[x‚ÇÅ y‚ÇÅ] z‚ÇÅ] [[x‚ÇÇ y‚ÇÇ] z‚ÇÇ]. apply aand_assoc. Qed.
  Local Instance prod_ar_is_fun X Y Z : @IsFun (X√ó(Y√óZ)) (X√óY√óZ) a·µ£.
  Proof. intros [x‚ÇÅ [y‚ÇÅ z‚ÇÅ]] [x‚ÇÇ [y‚ÇÇ z‚ÇÇ]]. apply aand_assoc. Qed.

  Definition tensor_assoc_l X Y Z := @make_fun _ _ _ (tnsr_al_is_fun X Y Z).
  Definition tensor_assoc_r X Y Z := @make_fun _ _ _ (tnsr_ar_is_fun X Y Z).
  Definition prod_assoc_l X Y Z := @make_fun _ _ _ (prod_al_is_fun X Y Z).
  Definition prod_assoc_r X Y Z := @make_fun _ _ _ (prod_ar_is_fun X Y Z).
End assoc.

Global Hint Extern 2 (Inverse (tensor_assoc_l ?X ?Y ?Z)) => eexact (tensor_assoc_r X Y Z) : typeclass_instances.
Global Hint Extern 2 (Inverse (tensor_assoc_r ?X ?Y ?Z)) => eexact (tensor_assoc_l X Y Z) : typeclass_instances.
Global Hint Extern 2 (Inverse (prod_assoc_l ?X ?Y ?Z)) => eexact (prod_assoc_r X Y Z) : typeclass_instances.
Global Hint Extern 2 (Inverse (prod_assoc_r ?X ?Y ?Z)) => eexact (prod_assoc_l X Y Z) : typeclass_instances.


Lemma tensor_assoc_l_bijective {X Y Z} : Bijective (tensor_assoc_l X Y Z).
Proof. now apply alt_Build_Bijective. Qed.
Lemma tensor_assoc_r_bijective {X Y Z} : Bijective (tensor_assoc_r X Y Z).
Proof. now apply alt_Build_Bijective. Qed.
Lemma prod_assoc_l_bijective {X Y Z} : Bijective (prod_assoc_l X Y Z).
Proof. now apply alt_Build_Bijective. Qed.
Lemma prod_assoc_r_bijective {X Y Z} : Bijective (prod_assoc_r X Y Z).
Proof. now apply alt_Build_Bijective. Qed.

Global Hint Extern 2 (Bijective  (tensor_assoc_l _ _ _)) => simple notypeclasses refine tensor_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_assoc_l _ _ _)) => simple notypeclasses refine tensor_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_assoc_l _ _ _)) => simple notypeclasses refine tensor_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Bijective  (tensor_assoc_r _ _ _)) => simple notypeclasses refine tensor_assoc_r_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_assoc_r _ _ _)) => simple notypeclasses refine tensor_assoc_r_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_assoc_r _ _ _)) => simple notypeclasses refine tensor_assoc_r_bijective : typeclass_instances.
Global Hint Extern 2 (Bijective  (prod_assoc_l _ _ _)) => simple notypeclasses refine prod_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (prod_assoc_l _ _ _)) => simple notypeclasses refine prod_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (prod_assoc_l _ _ _)) => simple notypeclasses refine prod_assoc_l_bijective : typeclass_instances.
Global Hint Extern 2 (Bijective  (prod_assoc_r _ _ _)) => simple notypeclasses refine prod_assoc_r_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (prod_assoc_r _ _ _)) => simple notypeclasses refine prod_assoc_r_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (prod_assoc_r _ _ _)) => simple notypeclasses refine prod_assoc_r_bijective : typeclass_instances.



Section unitors.
  (*Universes i.
  Context (X:set@{i}).*)
  Local Instance tensor_unit_l_is_fun X : @IsFun (ùüè ‚äó X) X proj2.
  Proof. intros [u‚ÇÅ x‚ÇÅ][u‚ÇÇ x‚ÇÇ]. apply aprod_unit_l. Qed.
  Local Instance tensor_unit_r_is_fun X : @IsFun (X ‚äó ùüè) X proj1.
  Proof. intros [x‚ÇÅ u‚ÇÅ][x‚ÇÇ u‚ÇÇ]. apply aprod_unit_r. Qed.
  Definition tensor_unit_l X := @make_fun _ _ _ (tensor_unit_l_is_fun X).
  Definition tensor_unit_r X := @make_fun _ _ _ (tensor_unit_r_is_fun X).

  Local Instance tensor_unit_l_inv_is_fun X : @IsFun X (ùüè ‚äó X) (Œª x, (tt, x)).
  Proof. intros x‚ÇÅ x‚ÇÇ. change (x‚ÇÅ = x‚ÇÇ ‚ä∏ ùêì ‚ä† x‚ÇÅ = x‚ÇÇ). now rew (aprod_unit_l _). Qed.
  Local Instance tensor_unit_r_inv_is_fun X : @IsFun X (X ‚äó ùüè) (Œª x, (x, tt)).
  Proof. intros x‚ÇÅ x‚ÇÇ. change (x‚ÇÅ = x‚ÇÇ ‚ä∏ x‚ÇÅ = x‚ÇÇ ‚ä† ùêì). now rew (aprod_unit_r _). Qed.
  Local Instance tensor_unit_l_inv X : Inverse (tensor_unit_l X) := @make_fun _ _ _ (tensor_unit_l_inv_is_fun X).
  Local Instance tensor_unit_r_inv X : Inverse (tensor_unit_r X) := @make_fun _ _ _ (tensor_unit_r_inv_is_fun X).

  Lemma tensor_unit_l_bijective X : Bijective (tensor_unit_l X).
  Proof. now apply alt_Build_Bijective. Qed.
  Lemma tensor_unit_r_bijective X : Bijective (tensor_unit_r X).
  Proof. now apply alt_Build_Bijective. Qed.
End unitors.
Global Hint Extern 2 (Inverse  (tensor_unit_l ?X)) => eexact (tensor_unit_l_inv X) : typeclass_instances.
Global Hint Extern 2 (Inverse  (tensor_unit_r ?X)) => eexact (tensor_unit_r_inv X) : typeclass_instances.
Global Hint Extern 2 (Bijective  (tensor_unit_l ?X)) => simple notypeclasses refine (tensor_unit_l_bijective X) : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_unit_l ?X)) => simple notypeclasses refine (tensor_unit_l_bijective X) : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_unit_l ?X)) => simple notypeclasses refine (tensor_unit_l_bijective X) : typeclass_instances.
Global Hint Extern 2 (Bijective  (tensor_unit_r ?X)) => simple notypeclasses refine (tensor_unit_r_bijective X) : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_unit_r ?X)) => simple notypeclasses refine (tensor_unit_r_bijective X) : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_unit_r ?X)) => simple notypeclasses refine (tensor_unit_r_bijective X) : typeclass_instances.

Definition tensor_swap_tail@{i} (X Y Z : set@{i}) : X ‚äó Y ‚äó Z ‚áæ X ‚äó Z ‚äó Y
  := tensor_assoc_r _ _ _ ‚àò ‚ü® id, tensor_swap _ _ ‚ü© ‚àò tensor_assoc_l _ _ _.
Global Hint Extern 2 (Inverse (tensor_swap_tail ?X ?Y ?Z)) => eexact (tensor_swap_tail X Z Y) : typeclass_instances.
Lemma tensor_swap_tail_bijective {X Y Z} : Bijective (tensor_swap_tail X Y Z).
Proof. now apply alt_Build_Bijective. Qed.
Global Hint Extern 2 (Bijective  (tensor_swap_tail _ _ _)) => simple notypeclasses refine tensor_swap_tail_bijective : typeclass_instances.
Global Hint Extern 2 (Injective  (tensor_swap_tail _ _ _)) => simple notypeclasses refine tensor_swap_tail_bijective : typeclass_instances.
Global Hint Extern 2 (Surjective (tensor_swap_tail _ _ _)) => simple notypeclasses refine tensor_swap_tail_bijective : typeclass_instances.

Section curry.
  (*Universes i.
  Context {X Y Z : set@{i}}.*)

  Local Instance curry_is_fun1 `(f:X ‚äó Y ‚áæ Z) (x:X) : @IsFun Y Z (Œª y, f (x, y)).
  Proof. intros y‚ÇÅ y‚ÇÇ. rew <-(is_fun f _ _). change (y‚ÇÅ = y‚ÇÇ ‚ä∏ x = x ‚ä† y‚ÇÅ = y‚ÇÇ).
    now rew (aprod_true_l (_ : x = x)).
  Qed.
  Local Notation ap Y Z f x := (@make_fun Y Z (Œª y, f (x, y)) _).

  Local Instance curry_is_fun2 `(f:X ‚äó Y ‚áæ Z) : @IsFun X (Y ‚áæ Z) (Œª x, ap Y Z f x).
  Proof. intros x‚ÇÅ x‚ÇÇ. change (x‚ÇÅ = x‚ÇÇ ‚ä∏ ‚àè y, f(x‚ÇÅ,y) = f(x‚ÇÇ,y)). rew <-all_adj; intros y.
    rew <-(is_fun f _ _). change (x‚ÇÅ = x‚ÇÇ ‚ä∏ x‚ÇÅ = x‚ÇÇ ‚ä† y = y). now rew (aprod_true_r (_ : y=y)).
  Qed.
  Local Notation ap' X Y Z f := (@make_fun X (Y ‚áæ Z) (Œª x, ap Y Z f x) _).

  Local Instance curry_is_fun3 {X Y Z} : @IsFun (X ‚äó Y ‚áæ Z) (X ‚áæ Y ‚áæ Z) (Œª f, ap' X Y Z f).
  Proof. intros f‚ÇÅ f‚ÇÇ. change ( (‚àè p, f‚ÇÅ p = f‚ÇÇ p) ‚ä∏ (‚àè x y, f‚ÇÅ (x,y) = f‚ÇÇ (x,y)) ).
    rew <-all_adj; intros x. rew <-all_adj; intros y. exact (all_lb _ (x, y)).
  Qed.
  Definition curry {X Y Z} := @make_fun (X ‚äó Y ‚áæ Z) (X ‚áæ Y ‚áæ Z) _ curry_is_fun3.

  Local Instance uncurry_is_fun1 `(f:X ‚áæ Y ‚áæ Z) : @IsFun (X ‚äó Y) Z (Œª p, f (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)).
  Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ].
    change (x‚ÇÅ = x‚ÇÇ ‚ä† y‚ÇÅ = y‚ÇÇ ‚ä∏ f x‚ÇÅ y‚ÇÅ = f x‚ÇÇ y‚ÇÇ).
    rew <-(transitivity (=) (f x‚ÇÅ y‚ÇÅ) (f x‚ÇÇ y‚ÇÅ) (f x‚ÇÇ y‚ÇÇ)).
    refine (aprod_proper_aimpl _ _).
    + enough (f x‚ÇÅ = f x‚ÇÇ ‚ä∏ f x‚ÇÅ y‚ÇÅ = f x‚ÇÇ y‚ÇÅ) as E by (rew <-E; exact (is_fun f _ _)).
      exact (all_lb _ _).
    + exact (is_fun _ _ _).
  Qed.
  Local Notation uc X Y Z f := (@make_fun (X ‚äó Y) Z (Œª p, f (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)) _).

  Local Instance uncurry_is_fun2 {X Y Z} : @IsFun (X ‚áæ Y ‚áæ Z) (X ‚äó Y ‚áæ Z) (Œª f, uc X Y Z f).
  Proof. intros f‚ÇÅ f‚ÇÇ.
    change ((‚àè x y, f‚ÇÅ x y = f‚ÇÇ x y) ‚ä∏ ‚àè p, f‚ÇÅ (œÄ‚ÇÅ p) (œÄ‚ÇÇ p) = f‚ÇÇ (œÄ‚ÇÅ p) (œÄ‚ÇÇ p)).
    rew <-all_adj. intros [x y]. rew (all_lb _ x). exact (all_lb _ _).
  Qed.
  Definition uncurry {X Y Z} := @make_fun _ _ _ (@uncurry_is_fun2 X Y Z).
End curry.

Section partial_application.
  (*Universes i.
  Context {X Y Z : set@{i}}.*)

  Definition ap1 {X Y Z} : (X ‚äó Y ‚áæ Z) ‚áæ X ‚áæ Y ‚áæ Z := curry.
  Definition ap2 {X Y Z} : (X ‚äó Y ‚áæ Z) ‚áæ Y ‚áæ X ‚áæ Z :=
    curry ‚àò curry ((‚àò) ‚àò tensor_swap _ _) (tensor_swap _ _).
End partial_application.
Notation "( f ‚àò)" := (func_op2 ap1 (‚àò) f) : set_scope.
Notation "(‚àò f )" := (func_op2 ap2 (‚àò) f) : set_scope.

Lemma to_strong_set_strong `{f:X ‚äó Y ‚áæ Z} `{!StrongSet Z} : StrongOp f.
Proof. intros [x‚ÇÅ y‚ÇÅ][x‚ÇÇ y‚ÇÇ]. unfold_pair_eq.
  rew <-(strong_transitivity (=) _ (f (x‚ÇÇ, y‚ÇÅ)) _).
  apply aand_intro.
+ rew (aandl _ _). exact (is_fun (ap2 f y‚ÇÅ) _ _).
+ rew (aandr _ _). exact (is_fun (ap1 f x‚ÇÇ) _ _).
Qed.
Global Hint Extern 4 (StrongOp _) => simple notypeclasses refine to_strong_set_strong : typeclass_instances.

Section misc.
  Universes i.

  (** Evaluation *)
  Definition eval {X Y : set@{i}} : (X ‚áæ Y) ‚äó X ‚áæ Y := uncurry id.

  (** Constant functions *)
  Definition const {X Y : set@{i}} : Y ‚áæ X ‚áæ Y := curry@{i} (tensor_unit_r _ ‚àò ‚ü® id, the ‚ü©).

  (** Cartesian product functor action on functions *)
  Local Notation œÄ‚ÇÅ := (prod_proj1 _ _).
  Local Notation œÄ‚ÇÇ := (prod_proj2 _ _).
  Definition prod_map {X‚ÇÅ X‚ÇÇ Y‚ÇÅ Y‚ÇÇ: set@{i}} : (X‚ÇÅ ‚áæ Y‚ÇÅ) √ó (X‚ÇÇ ‚áæ Y‚ÇÇ) ‚áæ X‚ÇÅ √ó X‚ÇÇ ‚áæ Y‚ÇÅ √ó Y‚ÇÇ
     := to_prod ‚àò to_prod ((‚àò œÄ‚ÇÅ) ‚àò œÄ‚ÇÅ, (‚àò œÄ‚ÇÇ) ‚àò œÄ‚ÇÇ).

  (** [pair] is a function *)
  Definition tensor_pair {X Y : set@{i}} : X ‚áæ Y ‚áæ X ‚äó Y := ap1 id.
  Definition tensor_pair_swap {X Y : set@{i}} : Y ‚áæ X ‚áæ X ‚äó Y := ap2 id.
  Definition prod_pair {X Y : set@{i}} : X ‚áæ Y ‚áæ X √ó Y := ap1 (cast _ _).
  Definition prod_pair_swap {X Y : set@{i}} : Y ‚áæ X ‚áæ X √ó Y := ap2 (cast _ _).
End misc.

Lemma tensor_map_id {X:set} {Y:set} : ‚ü®@id X, @id Y‚ü© = id.
Proof. change (‚àè p : X ‚äó Y, proj1 p = proj1 p ‚ä† proj2 p = proj2 p). now intros [??]. Qed.

Lemma prod_map_id {X:set} {Y:set} : prod_map (id_fun X, id_fun Y) = id.
Proof. change (‚àè p : X √ó Y, proj1 p = proj1 p ‚àß proj2 p = proj2 p). now intros [??]. Qed.


Definition of_course_op3 `(f:X ‚äó Y ‚äó Z ‚áæ W) : !X ‚äó !Y ‚äó !Z ‚áæ !W
:= of_course_map f ‚àò of_course_tensor_set_inv _ _  ‚àò ‚ü®of_course_tensor_set_inv _ _, id‚ü©.

Section sum.
  Import tsum_notation.

  Lemma inl_is_fun {X Y : set} : @IsFun X (X+Y) inl.  Proof. now intros x‚ÇÅ x‚ÇÇ. Qed.
  Lemma inr_is_fun {X Y : set} : @IsFun Y (X+Y) inr.  Proof. now intros y‚ÇÅ y‚ÇÇ. Qed.

  Canonical Structure inl_fun {X} Y := @make_fun _ _ _ (@inl_is_fun X Y).
  Canonical Structure inr_fun X {Y} := @make_fun _ _ _ (@inr_is_fun X Y).

  Definition inl_ne_inr {X Y : set} {x:X} {y:Y} : inl x ‚â† inr y := I.
  Definition inr_ne_inl {X Y : set} {x:X} {y:Y} : inr y ‚â† inl x := I.
End sum.


